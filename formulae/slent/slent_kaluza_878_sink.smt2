(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Kaluza benchmarks
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, CVC4, Norn, S3P, Trau, Z3-str3
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun T_95 () Bool)
(declare-fun T_96 () Bool)
(declare-fun T_SELECT_11 () Bool)
(declare-fun I0_256 () Int)
(declare-fun PCTEMP_LHS_15 () Int)
(declare-fun T0_256 () String)
(declare-fun T1_256 () String)
(declare-fun T2_256 () String)
(declare-fun T3_256 () String)
(declare-fun T4_256 () String)
(declare-fun T5_256 () String)
(declare-fun T_93 () String)
(assert (= T_93 (str.++ T0_256 T1_256)))
(assert (= T1_256 (str.++ T2_256 T3_256)))
(assert (= T2_256 (str.++ T4_256 T5_256)))
(assert (not (str.in_re T4_256 (str.to_re "__utmx=169413169"))))
(assert (= T5_256 "__utmx=169413169"))
(assert T_96)
(assert (= T_96 (not T_95)))
(assert (= T_95 (< (- 1) PCTEMP_LHS_15)))
(assert (= PCTEMP_LHS_15 (+ I0_256 0)))
(assert (= T_SELECT_11 (not (= PCTEMP_LHS_15 (- 1)))))
(assert (= 0 (str.len T0_256))) ; len 0
(assert (= I0_256 (str.len T4_256))) ; len 1
(assert T_SELECT_11)
(check-sat)
(exit)
