(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Stranger benchmarks (with string-to-string replace-all)
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, S3P, Trau
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun literal_32 () String)
(declare-fun b_literal_32 () Bool)
(declare-fun literal_39 () String)
(declare-fun b_literal_39 () Bool)
(declare-fun sigmaStar_4256 () String)
(declare-fun b_sigmaStar_4256 () Bool)
(declare-fun literal_44 () String)
(declare-fun b_literal_44 () Bool)
(declare-fun sigmaStar_4258 () String)
(declare-fun b_sigmaStar_4258 () Bool)
(declare-fun literal_45 () String)
(declare-fun b_literal_45 () Bool)
(declare-fun sigmaStar_4260 () String)
(declare-fun b_sigmaStar_4260 () Bool)
(declare-fun literal_48 () String)
(declare-fun b_literal_48 () Bool)
(declare-fun sigmaStar_4262 () String)
(declare-fun b_sigmaStar_4262 () Bool)
(declare-fun sigmaStar_safe_63 () String)
(declare-fun b_sigmaStar_safe_63 () Bool)
(declare-fun literal_53 () String)
(declare-fun b_literal_53 () Bool)
(declare-fun literal_55 () String)
(declare-fun b_literal_55 () Bool)
(declare-fun literal_62 () String)
(declare-fun b_literal_62 () Bool)
(declare-fun literal_64 () String)
(declare-fun b_literal_64 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_47 () String)
(declare-fun b_x_47 () Bool)
(declare-fun x_49 () String)
(declare-fun b_x_49 () Bool)
(declare-fun x_50 () String)
(declare-fun b_x_50 () Bool)
(declare-fun x_51 () String)
(declare-fun b_x_51 () Bool)
(declare-fun x_52 () String)
(declare-fun b_x_52 () Bool)
(declare-fun x_54 () String)
(declare-fun b_x_54 () Bool)
(declare-fun x_56 () String)
(declare-fun b_x_56 () Bool)
(declare-fun x_57 () String)
(declare-fun b_x_57 () Bool)
(declare-fun x_58 () String)
(declare-fun b_x_58 () Bool)
(declare-fun x_59 () String)
(declare-fun b_x_59 () Bool)
(declare-fun x_60 () String)
(declare-fun b_x_60 () Bool)
(declare-fun x_61 () String)
(declare-fun b_x_61 () Bool)
(declare-fun x_63 () String)
(declare-fun b_x_63 () Bool)
(declare-fun x_65 () String)
(declare-fun b_x_65 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)

(assert (and b_literal_32 (= literal_32 "\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{2e}\u{65}\u{78}\u{65}")))
(assert (and b_literal_39 (= literal_39 "\u{20}\u{2b}\u{2b}\u{20}\u{2d}\u{65}\u{20}\u{20}\u{5c}\u{22}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{5c}\u{22}\u{20}")))
(assert (and b_literal_44 (= literal_44 "\u{5c}\u{22}\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{2e}\u{64}\u{61}\u{72}\u{77}\u{69}\u{6e}\u{5c}\u{22}\u{20}\u{2d}\u{65}\u{20}\u{5c}\u{22}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{5c}\u{22}\u{20}")))
(assert (and b_literal_45 (= literal_45 "\u{5c}\u{22}\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{2e}\u{6c}\u{69}\u{6e}\u{75}\u{78}\u{5c}\u{22}\u{20}\u{2d}\u{65}\u{20}\u{5c}\u{22}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{5c}\u{22}\u{20}")))
(assert (and b_literal_48 (= literal_48 "\u{2f}\u{2f}\u{6d}\u{69}\u{6d}\u{65}\u{74}\u{65}\u{78}\u{20}\u{2d}\u{65}\u{20}\u{2f}\u{2f}\u{2e}\u{67}\u{69}\u{66}\u{20}")))
(assert (= b_sigmaStar_safe_63 (str.in_re sigmaStar_safe_63 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z")))))))
(assert (and b_literal_53 (= literal_53 "")))
(assert (and b_literal_55 (= literal_55 "\u{54}\u{68}\u{65}\u{20}\u{73}\u{68}\u{65}\u{6c}\u{6c}\u{20}\u{63}\u{6f}\u{6d}\u{6d}\u{61}\u{6e}\u{64}\u{3c}\u{62}\u{72}\u{20}\u{2f}\u{3e}")))
(assert (and b_literal_62 (= literal_62 "\u{3c}\u{62}\u{72}\u{20}\u{2f}\u{3e}\u{72}\u{65}\u{74}\u{75}\u{72}\u{6e}\u{65}\u{64}\u{20}\u{73}\u{74}\u{61}\u{74}\u{75}\u{73}\u{20}\u{3d}\u{20}")))
(assert (and b_literal_64 (= literal_64 "\u{3c}\u{62}\u{72}\u{20}\u{2f}\u{3e}\u{5c}\u{6e}")))
(assert (str.in_re atkPtn (re.++ (str.to_re "<SCRIPT ") (re.++ (re.* re.allchar) (str.to_re ">")))))
(assert (= atk_sink (str.++ atk_sigmaStar_1 (str.++ atkPtn atk_sigmaStar_2))))
(assert (= b_x_47 (and (= x_47 (str.replace literal_32 " " "^ ") ) b_literal_32) ))
(assert (= b_x_49 (and (= x_49 (str.++ literal_39 sigmaStar_4256) ) b_literal_39 b_sigmaStar_4256) ))
(assert (= b_x_50 (and (= x_50 (str.++ literal_44 sigmaStar_4258) ) b_literal_44 b_sigmaStar_4258) ))
(assert (= b_x_51 (and (= x_51 (str.++ literal_45 sigmaStar_4260) ) b_literal_45 b_sigmaStar_4260) ))
(assert (= b_x_52 (and (= x_52 (str.++ literal_48 sigmaStar_4262) ) b_literal_48 b_sigmaStar_4262) ))
(assert (= b_x_54 (and (= x_54 (str.++ x_47 x_49) ) b_x_47 b_x_49) ))
(assert (= b_x_56 (or (and (= x_56 x_52) b_x_52) (and (= x_56 sigmaStar_safe_63) b_sigmaStar_safe_63) ) ))
(assert (= b_x_57 (or (and (= x_57 x_56) b_x_56) (and (= x_57 x_54) b_x_54) ) ))
(assert (= b_x_58 (or (and (= x_58 x_57) b_x_57) (and (= x_58 literal_53) b_literal_53) ) ))
(assert (= b_x_59 (or (and (= x_59 x_58) b_x_58) (and (= x_59 x_51) b_x_51) ) ))
(assert (= b_x_60 (or (and (= x_60 x_59) b_x_59) (and (= x_60 x_50) b_x_50) ) ))
(assert (= b_x_61 (and (= x_61 (str.++ literal_55 x_60) ) b_literal_55 b_x_60) ))
(assert (= b_x_63 (and (= x_63 (str.++ x_61 literal_62) ) b_x_61 b_literal_62) ))
(assert (= b_x_65 (and (= x_65 (str.++ x_63 literal_64) ) b_x_63 b_literal_64) ))
(assert (and (= sink x_65) (= sink atk_sink) b_x_65))
(assert (< 30 (+ (str.len x_60) (str.len sink)) ) )
(check-sat)
(exit)
