(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Kaluza benchmarks
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, CVC4, Norn, S3P, Trau, Z3-str3
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun T_SELECT_1 () Bool)
(declare-fun T_e () Bool)
(declare-fun T_f () Bool)
(declare-fun I0_24 () Int)
(declare-fun PCTEMP_LHS_5 () Int)
(declare-fun T0_24 () String)
(declare-fun T1_24 () String)
(declare-fun T2_24 () String)
(declare-fun T3_24 () String)
(declare-fun T4_24 () String)
(declare-fun T5_24 () String)
(declare-fun T_c () String)
(assert (= T_c (str.++ T0_24 T1_24)))
(assert (= T1_24 (str.++ T2_24 T3_24)))
(assert (= T2_24 (str.++ T4_24 T5_24)))
(assert (not (str.in_re T4_24 (str.to_re "__utmz=218069774."))))
(assert (= T5_24 "__utmz=218069774."))
(assert T_f)
(assert (= T_f (not T_e)))
(assert (= T_e (< (- 1) PCTEMP_LHS_5)))
(assert (= PCTEMP_LHS_5 (+ I0_24 0)))
(assert (= T_SELECT_1 (not (= PCTEMP_LHS_5 (- 1)))))
(assert (= 0 (str.len T0_24))) ; len 0
(assert (= I0_24 (str.len T4_24))) ; len 1
(assert T_SELECT_1)
(check-sat)
(exit)
