(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Kaluza benchmarks
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, CVC4, Norn, S3P, Trau, Z3-str3
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun T_7 () Bool)
(declare-fun T_8 () Bool)
(declare-fun T_a () Bool)
(declare-fun T_b () Bool)
(declare-fun T_d () Bool)
(declare-fun T_e () Bool)
(declare-fun T_3 () Int)
(declare-fun T_4 () Int)
(declare-fun T_6 () Int)
(declare-fun T_9 () Int)
(declare-fun T_c () Int)
(declare-fun T0_24 () String)
(assert (= T_3 (str.len T0_24))) ; len 0
(assert T_8)
(assert (= T_8 (not T_7)))
(assert (= T_7 (< 70 T_6)))
(assert (= T_6 (str.len T0_24))) ; len 0
(assert T_b)
(assert (= T_b (not T_a)))
(assert (= T_a (< 70 T_9)))
(assert (= T_9 (str.len T0_24))) ; len 0
(assert T_e)
(assert (= T_e (not T_d)))
(assert (= T_d (< 70 T_c)))
(assert (= T_c (str.len T0_24))) ; len 0
(check-sat)
(exit)
