(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Stranger benchmarks (with string-to-string replace-all)
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, S3P, Trau
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun literal_1 () String)
(declare-fun b_literal_1 () Bool)
(declare-fun sigmaStar_2256 () String)
(declare-fun b_sigmaStar_2256 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_23 () String)
(declare-fun b_x_23 () Bool)
(declare-fun x_27 () String)
(declare-fun b_x_27 () Bool)
(declare-fun x_31 () String)
(declare-fun b_x_31 () Bool)
(declare-fun x_35 () String)
(declare-fun b_x_35 () Bool)
(declare-fun x_36 () String)
(declare-fun b_x_36 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)
(declare-fun sigmaStar_n0 () String)
(declare-fun b_sigmaStar_n0 () Bool)

(assert (and b_literal_1 (= literal_1 "\u{53}\u{45}\u{43}\u{55}\u{52}\u{49}\u{54}\u{59}\u{20}\u{57}\u{41}\u{52}\u{4e}\u{49}\u{4e}\u{47}\u{3a}\u{20}\u{6c}\u{6f}\u{67}\u{67}\u{65}\u{64}\u{20}\u{69}\u{6e}\u{74}\u{72}\u{75}\u{73}\u{69}\u{6f}\u{6e}\u{20}\u{61}\u{74}\u{74}\u{65}\u{6d}\u{70}\u{74}\u{20}\u{61}\u{67}\u{61}\u{69}\u{6e}\u{73}\u{74}\u{20}\u{6c}\u{69}\u{62}\u{2f}\u{61}\u{64}\u{6f}\u{64}\u{62}\u{2f}\u{74}\u{65}\u{73}\u{74}\u{73}\u{2f}\u{74}\u{6d}\u{73}\u{73}\u{71}\u{6c}\u{2e}\u{70}\u{68}\u{70}")))
(assert (str.in_re atkPtn (str.to_re "livescript:")))
(assert (= atk_sink (str.++ atk_sigmaStar_1 (str.++ atkPtn atk_sigmaStar_2))))
(assert (= b_x_23 (or (and (= x_23 literal_1) b_literal_1) (and (= x_23 sigmaStar_2256) b_sigmaStar_2256) ) ))
(assert (= b_x_27 (and (= x_27 (str.replace x_23 "\'" "\'") ) b_x_23) ))
(assert (= b_x_31 (and (= x_31 (str.replace x_27 "\""" """") ) b_x_27) ))
(assert (= b_x_35 (and (= x_35 (str.replace x_31 "\\" "\") ) b_x_31) ))
(assert (= b_x_36 (or (and (= x_36 sigmaStar_n0) b_sigmaStar_n0) (and (= x_36 x_35) b_x_35) ) ))
(assert (and (= sink x_36) (= sink atk_sink) b_x_36))
(assert (> 40 (+ (str.len x_36) (str.len sink)) ) )
(check-sat)
(exit)
