(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Stranger benchmarks (with string-to-string replace-all)
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, S3P, Trau
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_048 () String)
(declare-fun b_sigmaStar_048 () Bool)
(declare-fun literal_9 () String)
(declare-fun b_literal_9 () Bool)
(declare-fun literal_11 () String)
(declare-fun b_literal_11 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_7 () String)
(declare-fun b_x_7 () Bool)
(declare-fun x_10 () String)
(declare-fun b_x_10 () Bool)
(declare-fun x_12 () String)
(declare-fun b_x_12 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)

(assert (and b_literal_9 (= literal_9 "\u{53}\u{45}\u{4c}\u{45}\u{43}\u{54}\u{20}\u{69}\u{64}\u{2c}\u{75}\u{73}\u{65}\u{72}\u{6e}\u{61}\u{6d}\u{65}\u{2c}\u{72}\u{65}\u{61}\u{6c}\u{6e}\u{61}\u{6d}\u{65}\u{2c}\u{70}\u{61}\u{73}\u{73}\u{77}\u{64}\u{20}\u{46}\u{52}\u{4f}\u{4d}\u{20}\u{75}\u{73}\u{65}\u{72}\u{73}\u{20}\u{57}\u{48}\u{45}\u{52}\u{45}\u{20}\u{75}\u{73}\u{65}\u{72}\u{6e}\u{61}\u{6d}\u{65}\u{3d}\u{27}")))
(assert (and b_literal_11 (= literal_11 "\u{27}")))
(assert (str.in_re atkPtn (re.++ (re.union (str.to_re "%27") (str.to_re "'")) (re.++ (re.* (str.to_re "s")) (re.++ (re.union (str.to_re "%6F") (str.to_re "o") (str.to_re "%4F")) (re.++ (re.* (str.to_re "s")) (re.++ (re.union (str.to_re "%72") (str.to_re "r") (str.to_re "%52")) (re.* (str.to_re "s")))))))))
(assert (= atk_sink (str.++ atk_sigmaStar_1 (str.++ atkPtn atk_sigmaStar_2))))
(assert (= b_x_7 (and (= x_7 (str.replace sigmaStar_048 "W" "") ) b_sigmaStar_048) ))
(assert (= b_x_10 (and (= x_10 (str.++ literal_9 x_7) ) b_literal_9 b_x_7) ))
(assert (= b_x_12 (and (= x_12 (str.++ x_10 literal_11) ) b_x_10 b_literal_11) ))
(assert (and (= sink x_12) (= sink atk_sink) b_x_12))
(assert (= 50 (+ (str.len sigmaStar_048) (str.len sink)) ) )
(check-sat)
(exit)
