(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Kaluza benchmarks
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, CVC4, Norn, S3P, Trau, Z3-str3
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun T_11c () Bool)
(declare-fun T_11d () Bool)
(declare-fun T_SELECT_24 () Bool)
(declare-fun I0_420 () Int)
(declare-fun I0_424 () Int)
(declare-fun I1_420 () Int)
(declare-fun I1_424 () Int)
(declare-fun I2_420 () Int)
(declare-fun I2_424 () Int)
(declare-fun PCTEMP_LHS_110 () Int)
(declare-fun T_121 () Int)
(declare-fun NEW_DGNode_1174 () String)
(declare-fun NEW_DGNode_1175 () String)
(declare-fun PCTEMP_LHS_158 () String)
(assert (= PCTEMP_LHS_158 NEW_DGNode_1175))
(assert (= NEW_DGNode_1175 NEW_DGNode_1174))
(assert (not (str.in_re NEW_DGNode_1175 (str.to_re "+"))))
(assert (not (str.in_re NEW_DGNode_1174 (str.to_re "%"))))
(assert (= T_SELECT_24 (not (= PCTEMP_LHS_110 (- 1)))))
(assert T_11d)
(assert (= T_11d (not T_11c)))
(assert (= T_11c (= PCTEMP_LHS_110 (- 1))))
(assert (= I0_420 (- PCTEMP_LHS_110 0)))
(assert (>= PCTEMP_LHS_110 0))
(assert (= I2_420 I1_420))
(assert (<= PCTEMP_LHS_110 I1_420))
(assert (= T_121 (+ PCTEMP_LHS_110 1)))
(assert (>= T_121 0))
(assert (>= I2_424 T_121))
(assert (= I2_424 I1_424))
(assert (<= I2_424 I1_424))
(assert (= I0_424 (- I2_424 T_121)))
(assert (= I0_424 (str.len PCTEMP_LHS_158))) ; len 0
(check-sat)
(exit)
