(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Hung-En Wang, Shih-Yu Chen, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: modified from Kaluza benchmarks
Application: Security analysis of string manipulating web applications with string length constraints
Target solver: ABC, CVC4, Norn, S3P, Trau, Z3-str3
Publication:
Hung-En Wang, Shih-Yu Chen, Fang Yu, Jie-Hong R. Jiang:
A symbolic model checking approach to the analysis of string and length constraints. ASE 2018: 623-633
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun T_27 () Bool)
(declare-fun T_2f () Bool)
(declare-fun T_30 () Bool)
(declare-fun T_SELECT_2 () Bool)
(declare-fun T_SELECT_3 () Bool)
(declare-fun I0_100 () Int)
(declare-fun I0_83 () Int)
(declare-fun I1_100 () Int)
(declare-fun I2_100 () Int)
(declare-fun PCTEMP_LHS_6 () Int)
(declare-fun PCTEMP_LHS_7 () Int)
(declare-fun T_37 () Int)
(declare-fun T0_83 () String)
(declare-fun T1_83 () String)
(declare-fun T2_83 () String)
(declare-fun T3_83 () String)
(declare-fun T4_83 () String)
(declare-fun T5_83 () String)
(declare-fun T_2d () String)
(assert (= T_2d (str.++ T0_83 T1_83)))
(assert (= T1_83 (str.++ T2_83 T3_83)))
(assert (= T2_83 (str.++ T4_83 T5_83)))
(assert (not (str.in_re T4_83 (str.to_re ";"))))
(assert (= T5_83 ";"))
(assert T_30)
(assert (= T_30 (not T_2f)))
(assert (= T_2f (< PCTEMP_LHS_7 0)))
(assert (= T_SELECT_2 (not (= PCTEMP_LHS_6 (- 1)))))
(assert T_27)
(assert (= T_27 (< (- 1) PCTEMP_LHS_6)))
(assert (= PCTEMP_LHS_7 (+ I0_83 PCTEMP_LHS_6)))
(assert (= T_37 (+ PCTEMP_LHS_6 7)))
(assert (>= T_37 0))
(assert (>= PCTEMP_LHS_7 T_37))
(assert (= I0_100 (- PCTEMP_LHS_7 T_37)))
(assert (= I2_100 I1_100))
(assert (<= PCTEMP_LHS_7 I1_100))
(assert (= T_SELECT_3 (not (= PCTEMP_LHS_7 (- 1)))))
(assert (= PCTEMP_LHS_6 (str.len T0_83))) ; len 0
(assert (= I0_83 (str.len T4_83))) ; len 1
(assert T_SELECT_3)
(check-sat)
(exit)
