(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun literal_28 () String)
(declare-fun x_31 () String)
(declare-fun literal_27 () String)
(declare-fun literal_24 () String)
(declare-fun x_33 () String)
(declare-fun literal_34 () String)
(declare-fun x_36 () String)
(declare-fun x_46 () String)
(declare-fun literal_40 () String)
(declare-fun literal_41 () String)
(declare-fun literal_44 () String)
(declare-fun literal_47 () String)
(declare-fun x_49 () String)
(declare-fun literal_54 () String)
(declare-fun x_56 () String)
(declare-fun literal_58 () String)
(declare-fun x_60 () String)
(declare-fun x_63 () String)
(declare-fun literal_62 () String)
(declare-fun literal_61 () String)
(declare-fun x_64 () String)
(declare-fun literal_65 () String)
(declare-fun x_66 () String)
(assert (= literal_28 "\x53\x45\x4c\x45\x43\x54\x20\x43\x4f\x55\x4e\x54\x28\x2a\x29\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x46\x52\x4f\x4d\x20\x6a\x6f\x75\x72\x6e\x61\x6c\x5f\x65\x6e\x74\x72\x69\x65\x73\x20\x6a\x2c\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x75\x73\x65\x72\x20\x75\x2c\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x75\x73\x65\x72\x5f\x73\x74\x75\x64\x65\x6e\x74\x73\x20\x73\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x57\x48\x45\x52\x45\x20\x6a\x2e\x75\x73\x65\x72\x69\x64\x20\x3d\x20\x75\x2e\x69\x64\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x41\x4e\x44\x20\x73\x2e\x75\x73\x65\x72\x69\x64\x20\x3d\x20\x75\x2e\x69\x64\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x41\x4e\x44\x20"))
(assert (= literal_27 ""))
(assert (= literal_24 "\x73\x2e\x63\x6f\x75\x72\x73\x65\x20\x3d\x20\x27\x27\x20\x41\x4e\x44"))
(assert (or (= x_31 literal_27) (= x_31 literal_24)))
(assert (= x_33 (str.++ literal_28 x_31)))
(assert (= literal_34 "\x20\x6a\x2e\x6a\x6f\x75\x72\x6e\x61\x6c\x20\x3d\x20"))
(assert (= x_36 (str.++ x_33 literal_34)))
(assert (= literal_40 "\x77\x65\x65\x6b"))
(assert (= literal_41 "\x74\x6f\x70\x69\x63"))
(assert (= literal_44 ""))
(assert (or (= x_46 literal_40) (= x_46 literal_41) (= x_46 literal_44)))
(assert (= literal_47 "\x20"))
(assert (= x_49 (str.++ x_46 literal_47)))
(assert (= literal_54 "\x3c\x68\x33\x3e"))
(assert (= x_56 (str.++ literal_54 x_49)))
(assert (= literal_58 "\x20\x2d\x20"))
(assert (= x_60 (str.++ x_56 literal_58)))
(assert (= literal_62 ""))
(assert (= literal_61 "\x26\x6e\x62\x73\x70\x3b\x28\x3c\x61\x20\x68\x72\x65\x66\x3d\x5c\x22\x72\x65\x70\x6f\x72\x74\x2e\x70\x68\x70\x3f\x69\x64\x3d\x5c\x22\x3e\x76\x69\x65\x77\x61\x6c\x6c\x65\x6e\x74\x72\x69\x65\x73\x3c\x2f\x61\x3e\x29"))
(assert (or (= x_63 literal_62) (= x_63 literal_61)))
(assert (= x_64 (str.++ x_60 x_63)))
(assert (= literal_65 "\x3c\x2f\x68\x33\x3e"))
(assert (= x_66 (str.++ x_64 literal_65)))
(assert (str.in_re x_66 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
