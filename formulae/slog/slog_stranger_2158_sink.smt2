(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun literal_12 () String)
(declare-fun x_11 () String)
(declare-fun literal_2 () String)
(declare-fun literal_3 () String)
(declare-fun literal_1 () String)
(declare-fun literal_6 () String)
(declare-fun literal_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_13 () String)
(declare-fun literal_14 () String)
(declare-fun x_21 () String)
(declare-fun literal_22 () String)
(declare-fun x_23 () String)
(declare-fun x_28 () String)
(declare-fun literal_20 () String)
(declare-fun literal_19 () String)
(declare-fun literal_15 () String)
(declare-fun literal_16 () String)
(declare-fun literal_17 () String)
(declare-fun literal_18 () String)
(declare-fun x_35 () String)
(declare-fun x_34 () String)
(declare-fun literal_29 () String)
(declare-fun x_36 () String)
(declare-fun literal_37 () String)
(declare-fun x_38 () String)
(declare-fun x_39 () String)
(declare-fun literal_40 () String)
(declare-fun x_41 () String)
(declare-fun x_46 () String)
(declare-fun epsilon () String)
(declare-fun x_47 () String)
(declare-fun literal_48 () String)
(declare-fun x_49 () String)
(declare-fun x_50 () String)
(declare-fun literal_51 () String)
(declare-fun x_52 () String)
(declare-fun literal_53 () String)
(declare-fun x_54 () String)
(declare-fun literal_55 () String)
(declare-fun x_56 () String)
(declare-fun x_64 () String)
(declare-fun literal_60 () String)
(declare-fun literal_59 () String)
(declare-fun literal_57 () String)
(declare-fun literal_58 () String)
(declare-fun x_65 () String)
(declare-fun literal_67 () String)
(declare-fun x_69 () String)
(declare-fun x_68 () String)
(declare-fun literal_61 () String)
(declare-fun literal_66 () String)
(declare-fun x_70 () String)
(declare-fun literal_71 () String)
(declare-fun x_72 () String)
(assert (= literal_12 "\x3c\x73\x70\x61\x6e\x20\x63\x6c\x61\x73\x73\x3d\x22"))
(assert (= literal_2 "\x75\x6e\x62\x6c\x6f\x63\x6b"))
(assert (= literal_3 "\x62\x6c\x6f\x63\x6b"))
(assert (= literal_1 "\x62\x6c\x6f\x63\x6b"))
(assert (= literal_6 "\x61\x64\x64"))
(assert (= literal_4 "\x61\x64\x64"))
(assert (= literal_5 "\x72\x65\x6d\x6f\x76\x65"))
(assert (or (= x_11 literal_2) (= x_11 literal_3) (= x_11 literal_1) (= x_11 literal_6) (= x_11 literal_4) (= x_11 literal_5)))
(assert (= x_13 (str.++ literal_12 x_11)))
(assert (= literal_14 "\x22\x3e"))
(assert (= x_21 (str.++ x_13 literal_14)))
(assert (= literal_22 "\x3c\x61\x20\x68\x72\x65\x66\x3d\x22"))
(assert (= x_23 (str.++ x_21 literal_22)))
(assert (= literal_20 "\x75\x73\x65\x72\x2e\x70\x68\x70\x3f\x69\x64\x3d"))
(assert (= literal_19 "\x75\x73\x65\x72\x2e\x70\x68\x70\x3f\x69\x64\x3d"))
(assert (= literal_15 "\x75\x73\x65\x72\x2e\x70\x68\x70\x3f\x69\x64\x3d"))
(assert (= literal_16 "\x75\x73\x65\x72\x2e\x70\x68\x70\x3f\x69\x64\x3d"))
(assert (= literal_17 "\x75\x73\x65\x72\x2e\x70\x68\x70\x3f\x69\x64\x3d"))
(assert (= literal_18 "\x75\x73\x65\x72\x2e\x70\x68\x70\x3f\x69\x64\x3d"))
(assert (or (= x_28 literal_20) (= x_28 literal_19) (= x_28 literal_15) (= x_28 literal_16) (= x_28 literal_17) (= x_28 literal_18)))
(assert (= x_35 (str.++ x_23 x_28)))
(assert (or (= x_34 literal_2) (= x_34 literal_3) (= x_34 literal_1) (= x_34 literal_6) (= x_34 literal_4) (= x_34 literal_5)))
(assert (= literal_29 "\x63\x6f\x6e\x74\x61\x63\x74"))
(assert (= x_36 (str.++ x_34 literal_29)))
(assert (= literal_37 "\x26\x61\x6d\x70\x3b"))
(assert (= x_38 (str.++ x_35 literal_37)))
(assert (= x_39 (str.++ x_38 x_36)))
(assert (= literal_40 "\x3d"))
(assert (= x_41 (str.++ x_39 literal_40)))
(assert (= epsilon ""))
(assert (= x_46 epsilon))
(assert (= x_47 (str.++ x_41 x_46)))
(assert (= literal_48 "\x26\x61\x6d\x70\x3b\x73\x65\x73\x73\x6b\x65\x79\x3d"))
(assert (= x_49 (str.++ x_47 literal_48)))
(assert (= x_50 (str.++ x_49 sigmaStar_0)))
(assert (= literal_51 "\x22\x20\x74\x69\x74\x6c\x65\x3d\x22"))
(assert (= x_52 (str.++ x_50 literal_51)))
(assert (= literal_53 "\x22\x3e"))
(assert (= x_54 (str.++ x_52 literal_53)))
(assert (= literal_55 "\x3c\x69\x6d\x67\x20\x73\x72\x63\x3d\x22"))
(assert (= x_56 (str.++ x_54 literal_55)))
(assert (= literal_60 "\x2f\x74\x2f\x73\x74\x6f\x70\x2e\x67\x69\x66"))
(assert (= literal_59 "\x2f\x74\x2f\x75\x73\x65\x72\x6e\x6f\x74\x2e\x67\x69\x66"))
(assert (= literal_57 "\x2f\x74\x2f\x75\x73\x65\x72\x2e\x67\x69\x66"))
(assert (= literal_58 "\x2f\x74\x2f\x67\x6f\x2e\x67\x69\x66"))
(assert (or (= x_64 literal_60) (= x_64 literal_59) (= x_64 literal_57) (= x_64 literal_58)))
(assert (= x_65 (str.++ x_56 x_64)))
(assert (= literal_67 "\x22\x20\x68\x65\x69\x67\x68\x74\x3d\x22\x31\x31\x22\x20\x77\x69\x64\x74\x68\x3d\x22\x31\x31\x22\x20\x62\x6f\x72\x64\x65\x72\x3d\x22\x30\x22\x3e"))
(assert (= x_69 (str.++ x_65 literal_67)))
(assert (= literal_61 "\x26\x6e\x62\x73\x70\x3b"))
(assert (= literal_66 ""))
(assert (or (= x_68 literal_61) (= x_68 literal_66)))
(assert (= x_70 (str.++ x_69 x_68)))
(assert (= literal_71 "\x3c\x2f\x61\x3e\x3c\x2f\x73\x70\x61\x6e\x3e"))
(assert (= x_72 (str.++ x_70 literal_71)))
(assert (str.in_re x_72 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
