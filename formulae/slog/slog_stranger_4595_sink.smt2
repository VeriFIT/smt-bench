(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun x_5 () String)
(declare-fun epsilon () String)
(declare-fun literal_10 () String)
(declare-fun x_9 () String)
(declare-fun x_11 () String)
(declare-fun sigmaStar_16 () String)
(declare-fun x_12 () String)
(declare-fun literal_15 () String)
(declare-fun x_18 () String)
(declare-fun x_17 () String)
(declare-fun x_19 () String)
(declare-fun literal_20 () String)
(declare-fun x_21 () String)
(declare-fun x_22 () String)
(declare-fun literal_23 () String)
(declare-fun x_24 () String)
(assert (= epsilon ""))
(assert (or (= x_5 epsilon) (= x_5 sigmaStar_2)))
(assert (= x_9 (str.replace x_5 "\x40" "\x26\x23\x36\x34\x3b")))
(assert (= literal_10 "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a"))
(assert (= x_11 (str.++ literal_10 x_9)))
(assert (or (= x_12 epsilon) (= x_12 sigmaStar_0)))
(assert (= x_17 (str.replace x_12 "\x40" "\x26\x23\x36\x34\x3b")))
(assert (= literal_15 "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27"))
(assert (= x_18 (str.++ x_11 literal_15)))
(assert (= x_19 (str.++ x_18 x_17)))
(assert (= literal_20 "\x27\x3e"))
(assert (= x_21 (str.++ x_19 literal_20)))
(assert (= x_22 (str.++ x_21 sigmaStar_1)))
(assert (= literal_23 "\x3c\x2f\x61\x3e\x5d\x5c\x6e"))
(assert (= x_24 (str.++ x_22 literal_23)))
(assert (str.in_re x_24 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
