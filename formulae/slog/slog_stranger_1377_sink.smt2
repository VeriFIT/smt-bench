(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_15 () String)
(declare-fun x_16 () String)
(declare-fun literal_17 () String)
(declare-fun x_18 () String)
(declare-fun literal_19 () String)
(declare-fun x_20 () String)
(declare-fun literal_21 () String)
(declare-fun x_22 () String)
(declare-fun x_23 () String)
(declare-fun literal_24 () String)
(declare-fun x_25 () String)
(declare-fun literal_26 () String)
(declare-fun x_27 () String)
(declare-fun literal_28 () String)
(declare-fun x_29 () String)
(declare-fun literal_30 () String)
(declare-fun x_31 () String)
(declare-fun x_32 () String)
(declare-fun literal_33 () String)
(declare-fun x_34 () String)
(declare-fun literal_35 () String)
(declare-fun x_36 () String)
(declare-fun literal_37 () String)
(declare-fun x_38 () String)
(declare-fun literal_39 () String)
(declare-fun x_40 () String)
(declare-fun literal_41 () String)
(declare-fun x_44 () String)
(declare-fun x_47 () String)
(declare-fun x_50 () String)
(declare-fun literal_46 () String)
(declare-fun x_48 () String)
(declare-fun literal_42 () String)
(declare-fun literal_45 () String)
(declare-fun x_51 () String)
(assert (= literal_15 "\x3c\x73\x63\x72\x69\x70\x74\x20\x74\x79\x70\x65\x3d\x22\x74\x65\x78\x74\x2f\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x22\x3e\x5c\x6e\x3c\x21\x2d\x2d\x5c\x6e\x09\x76\x61\x72\x20\x73\x20\x3d\x20\x28\x74\x79\x70\x65\x6f\x66\x28\x77\x69\x6e\x64\x6f\x77\x2e\x6f\x6e\x6c\x6f\x61\x64\x29\x3d\x3d\x27\x66\x75\x6e\x63\x74\x69\x6f\x6e\x27\x29\x20\x3f\x20\x6f\x6e\x6c\x6f\x61\x64\x2e\x74\x6f\x53\x74\x72\x69\x6e\x67\x28\x29\x20\x3a\x20\x27\x27\x3b\x5c\x6e\x09\x69\x66\x20\x28\x73\x2e\x69\x6e\x64\x65\x78\x4f\x66\x28\x27"))
(assert (= x_16 (str.++ literal_15 sigmaStar_3)))
(assert (= literal_17 "\x27\x29\x3c\x30\x29\x20\x7b\x5c\x6e"))
(assert (= x_18 (str.++ x_16 literal_17)))
(assert (= literal_19 "\x09\x09\x69\x66\x20\x28\x73\x3d\x3d\x27\x27\x29\x20\x7b\x5c\x6e"))
(assert (= x_20 (str.++ x_18 literal_19)))
(assert (= literal_21 "\x09\x09\x09\x77\x69\x6e\x64\x6f\x77\x2e\x6f\x6e\x6c\x6f\x61\x64\x20\x3d\x20\x6e\x65\x77\x20\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x27"))
(assert (= x_22 (str.++ x_20 literal_21)))
(assert (= x_23 (str.++ x_22 sigmaStar_0)))
(assert (= literal_24 "\x27\x29\x3b\x5c\x6e"))
(assert (= x_25 (str.++ x_23 literal_24)))
(assert (= literal_26 "\x09\x09\x7d\x20\x65\x6c\x73\x65\x20\x7b\x5c\x6e"))
(assert (= x_27 (str.++ x_25 literal_26)))
(assert (= literal_28 "\x09\x09\x09\x77\x69\x6e\x64\x6f\x77\x2e\x6f\x6e\x6c\x6f\x61\x64\x5f\x68\x6f\x74\x70\x6f\x74\x20\x3d\x20\x6f\x6e\x6c\x6f\x61\x64\x3b\x5c\x6e"))
(assert (= x_29 (str.++ x_27 literal_28)))
(assert (= literal_30 "\x09\x09\x09\x77\x69\x6e\x64\x6f\x77\x2e\x6f\x6e\x6c\x6f\x61\x64\x20\x3d\x20\x6e\x65\x77\x20\x46\x75\x6e\x63\x74\x69\x6f\x6e\x28\x27\x77\x69\x6e\x64\x6f\x77\x2e\x6f\x6e\x6c\x6f\x61\x64\x5f\x68\x6f\x74\x70\x6f\x74\x28\x29\x3b\x27\x2b\x27"))
(assert (= x_31 (str.++ x_29 literal_30)))
(assert (= x_32 (str.++ x_31 sigmaStar_2)))
(assert (= literal_33 "\x27\x29\x3b\x5c\x6e"))
(assert (= x_34 (str.++ x_32 literal_33)))
(assert (= literal_35 "\x09\x09\x7d\x5c\x6e"))
(assert (= x_36 (str.++ x_34 literal_35)))
(assert (= literal_37 "\x09\x20\x7d\x5c\x6e"))
(assert (= x_38 (str.++ x_36 literal_37)))
(assert (= literal_39 "\x2f\x2f\x2d\x2d\x3e\x5c\x6e"))
(assert (= x_40 (str.++ x_38 literal_39)))
(assert (= literal_41 "\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x5c\x6e"))
(assert (= x_44 (str.++ x_40 literal_41)))
(assert (= x_47 (str.++ sigmaStar_1 x_44)))
(assert (= literal_46 ""))
(assert (or (= x_50 x_47) (= x_50 literal_46) (= x_50 sigmaStar_4)))
(assert (= literal_42 "\x3c\x2f\x68\x74\x6d\x6c\x3e"))
(assert (= literal_45 "\x3c\x2f\x62\x6f\x64\x79\x3e\x3c\x2f\x68\x74\x6d\x6c\x3e"))
(assert (or (= x_48 literal_42) (= x_48 literal_45)))
(assert (= x_51 (str.++ x_50 x_48)))
(assert (str.in_re x_51 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
