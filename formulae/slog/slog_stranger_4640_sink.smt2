(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun sigmaStar_10 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun sigmaStar_12 () String)
(declare-fun sigmaStar_13 () String)
(declare-fun sigmaStar_17 () String)
(declare-fun literal_16 () String)
(declare-fun x_15 () String)
(declare-fun literal_14 () String)
(declare-fun x_18 () String)
(declare-fun literal_19 () String)
(declare-fun x_21 () String)
(declare-fun literal_20 () String)
(declare-fun x_22 () String)
(declare-fun x_25 () String)
(declare-fun literal_23 () String)
(declare-fun x_26 () String)
(declare-fun literal_24 () String)
(declare-fun x_27 () String)
(declare-fun x_28 () String)
(declare-fun x_29 () String)
(declare-fun x_30 () String)
(declare-fun literal_31 () String)
(declare-fun x_32 () String)
(declare-fun x_33 () String)
(declare-fun x_34 () String)
(declare-fun literal_35 () String)
(declare-fun x_36 () String)
(declare-fun x_37 () String)
(declare-fun literal_38 () String)
(declare-fun x_39 () String)
(declare-fun x_40 () String)
(declare-fun literal_41 () String)
(declare-fun x_42 () String)
(declare-fun x_43 () String)
(declare-fun literal_44 () String)
(declare-fun x_45 () String)
(declare-fun x_46 () String)
(declare-fun literal_47 () String)
(declare-fun x_48 () String)
(declare-fun x_49 () String)
(declare-fun literal_50 () String)
(declare-fun x_51 () String)
(declare-fun x_52 () String)
(declare-fun literal_53 () String)
(declare-fun x_54 () String)
(declare-fun x_55 () String)
(declare-fun literal_56 () String)
(declare-fun x_57 () String)
(assert (= literal_16 "\x3f\x73\x74\x65\x70\x3d\x31\x26\x6c\x6f\x63\x61\x6c\x65\x73\x65\x74\x3d"))
(assert (= literal_14 "\x45\x6e\x67\x6c\x69\x73\x68"))
(assert (or (= x_15 sigmaStar_11) (= x_15 literal_14)))
(assert (= x_18 (str.++ literal_16 x_15)))
(assert (= literal_19 "\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x63\x65\x6e\x74\x65\x72\x27\x20\x63\x6f\x6c\x73\x70\x61\x6e\x3d\x27\x32\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x62\x3e"))
(assert (= x_21 (str.++ x_18 literal_19)))
(assert (= literal_20 "\x3c\x66\x6f\x72\x6d\x20\x6e\x61\x6d\x65\x3d\x27\x73\x65\x74\x75\x70\x27\x20\x6d\x65\x74\x68\x6f\x64\x3d\x27\x70\x6f\x73\x74\x27\x20\x61\x63\x74\x69\x6f\x6e\x3d\x27"))
(assert (= x_22 (str.++ literal_20 sigmaStar_17)))
(assert (= x_25 (str.++ x_22 x_21)))
(assert (= literal_23 "\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_26 (str.++ sigmaStar_7 literal_23)))
(assert (= literal_24 "\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_27 (str.++ sigmaStar_3 literal_24)))
(assert (= x_28 (str.++ x_25 sigmaStar_4)))
(assert (= x_29 (str.++ x_26 sigmaStar_6)))
(assert (= x_30 (str.++ x_27 sigmaStar_5)))
(assert (= literal_31 "\x3c\x2f\x62\x3e\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a"))
(assert (= x_32 (str.++ x_28 literal_31)))
(assert (or (= x_33 x_30) (= x_33 x_29)))
(assert (= x_34 (str.++ x_32 x_33)))
(assert (= literal_35 "\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x63\x6f\x6c\x73\x70\x61\x6e\x3d\x27\x32\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x3c\x62\x3e"))
(assert (= x_36 (str.++ x_34 literal_35)))
(assert (= x_37 (str.++ x_36 sigmaStar_0)))
(assert (= literal_38 "\x3c\x2f\x62\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x72\x69\x67\x68\x74\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e"))
(assert (= x_39 (str.++ x_37 literal_38)))
(assert (= x_40 (str.++ x_39 sigmaStar_9)))
(assert (= literal_41 "\x3c\x2f\x74\x64\x3e\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x64\x62\x5f\x68\x6f\x73\x74\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x72\x69\x67\x68\x74\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e"))
(assert (= x_42 (str.++ x_40 literal_41)))
(assert (= x_43 (str.++ x_42 sigmaStar_1)))
(assert (= literal_44 "\x3c\x2f\x74\x64\x3e\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x27\x20\x6e\x61\x6d\x65\x3d\x27\x64\x62\x5f\x75\x73\x65\x72\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x72\x69\x67\x68\x74\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e"))
(assert (= x_45 (str.++ x_43 literal_44)))
(assert (= x_46 (str.++ x_45 sigmaStar_12)))
(assert (= literal_47 "\x3c\x2f\x74\x64\x3e\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x70\x61\x73\x73\x77\x6f\x72\x64\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x27\x20\x6e\x61\x6d\x65\x3d\x27\x64\x62\x5f\x70\x61\x73\x73\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x72\x69\x67\x68\x74\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e"))
(assert (= x_48 (str.++ x_46 literal_47)))
(assert (= x_49 (str.++ x_48 sigmaStar_8)))
(assert (= literal_50 "\x3c\x2f\x74\x64\x3e\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x27\x20\x6e\x61\x6d\x65\x3d\x27\x64\x62\x5f\x6e\x61\x6d\x65\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x72\x69\x67\x68\x74\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e"))
(assert (= x_51 (str.++ x_49 literal_50)))
(assert (= x_52 (str.++ x_51 sigmaStar_2)))
(assert (= literal_53 "\x3c\x2f\x74\x64\x3e\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x66\x75\x73\x69\x6f\x6e\x5f\x27\x20\x6e\x61\x6d\x65\x3d\x27\x64\x62\x5f\x70\x72\x65\x66\x69\x78\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x63\x6f\x6c\x73\x70\x61\x6e\x3d\x27\x32\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x73\x75\x62\x6d\x69\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x6e\x65\x78\x74\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_54 (str.++ x_52 literal_53)))
(assert (= x_55 (str.++ x_54 sigmaStar_13)))
(assert (= literal_56 "\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x2f\x66\x6f\x72\x6d\x3e\x5c\x6e\x3c\x2f\x74\x64\x3e\x5c\x6e\x3c\x2f\x74\x72\x3e"))
(assert (= x_57 (str.++ x_55 literal_56)))
(assert (str.in_re x_57 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
