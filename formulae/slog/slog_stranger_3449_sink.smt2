(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_6 () String)
(declare-fun literal_7 () String)
(declare-fun x_10 () String)
(declare-fun x_11 () String)
(declare-fun literal_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_14 () String)
(declare-fun x_15 () String)
(declare-fun literal_16 () String)
(declare-fun x_19 () String)
(declare-fun x_20 () String)
(declare-fun literal_17 () String)
(declare-fun literal_18 () String)
(declare-fun x_21 () String)
(declare-fun literal_22 () String)
(declare-fun x_23 () String)
(declare-fun x_24 () String)
(declare-fun literal_25 () String)
(declare-fun x_28 () String)
(declare-fun x_29 () String)
(declare-fun literal_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_30 () String)
(declare-fun literal_31 () String)
(declare-fun x_32 () String)
(declare-fun x_33 () String)
(declare-fun literal_34 () String)
(declare-fun x_37 () String)
(declare-fun x_38 () String)
(declare-fun literal_35 () String)
(declare-fun literal_36 () String)
(declare-fun x_39 () String)
(declare-fun literal_40 () String)
(declare-fun x_41 () String)
(declare-fun x_42 () String)
(declare-fun literal_43 () String)
(declare-fun x_44 () String)
(assert (= literal_5 "\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_6 (str.++ literal_5 sigmaStar_0)))
(assert (= literal_7 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x73\x65\x6c\x65\x63\x74\x20\x6e\x61\x6d\x65\x3d\x27\x70\x61\x6e\x65\x6c\x5f\x73\x69\x64\x65\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x31\x35\x30\x70\x78\x3b\x27\x20\x6f\x6e\x63\x68\x61\x6e\x67\x65\x3d\x22\x73\x68\x6f\x77\x6f\x70\x74\x73\x28\x74\x68\x69\x73\x2e\x6f\x70\x74\x69\x6f\x6e\x73\x5b\x74\x68\x69\x73\x2e\x73\x65\x6c\x65\x63\x74\x65\x64\x49\x6e\x64\x65\x78\x5d\x2e\x76\x61\x6c\x75\x65\x29\x3b\x22\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x31\x27"))
(assert (= x_10 (str.++ x_6 literal_7)))
(assert (= literal_8 "\x20\x73\x65\x6c\x65\x63\x74\x65\x64"))
(assert (= literal_9 ""))
(assert (or (= x_11 literal_8) (= x_11 literal_9)))
(assert (= x_12 (str.++ x_10 x_11)))
(assert (= literal_13 "\x3e"))
(assert (= x_14 (str.++ x_12 literal_13)))
(assert (= x_15 (str.++ x_14 sigmaStar_2)))
(assert (= literal_16 "\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x32\x27"))
(assert (= x_19 (str.++ x_15 literal_16)))
(assert (= literal_17 "\x20\x73\x65\x6c\x65\x63\x74\x65\x64"))
(assert (= literal_18 ""))
(assert (or (= x_20 literal_17) (= x_20 literal_18)))
(assert (= x_21 (str.++ x_19 x_20)))
(assert (= literal_22 "\x3e"))
(assert (= x_23 (str.++ x_21 literal_22)))
(assert (= x_24 (str.++ x_23 sigmaStar_4)))
(assert (= literal_25 "\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x33\x27"))
(assert (= x_28 (str.++ x_24 literal_25)))
(assert (= literal_26 "\x20\x73\x65\x6c\x65\x63\x74\x65\x64"))
(assert (= literal_27 ""))
(assert (or (= x_29 literal_26) (= x_29 literal_27)))
(assert (= x_30 (str.++ x_28 x_29)))
(assert (= literal_31 "\x3e"))
(assert (= x_32 (str.++ x_30 literal_31)))
(assert (= x_33 (str.++ x_32 sigmaStar_1)))
(assert (= literal_34 "\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x34\x27"))
(assert (= x_37 (str.++ x_33 literal_34)))
(assert (= literal_35 "\x20\x73\x65\x6c\x65\x63\x74\x65\x64"))
(assert (= literal_36 ""))
(assert (or (= x_38 literal_35) (= x_38 literal_36)))
(assert (= x_39 (str.++ x_37 x_38)))
(assert (= literal_40 "\x3e"))
(assert (= x_41 (str.++ x_39 literal_40)))
(assert (= x_42 (str.++ x_41 sigmaStar_3)))
(assert (= literal_43 "\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x2f\x73\x65\x6c\x65\x63\x74\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x5c\x6e"))
(assert (= x_44 (str.++ x_42 literal_43)))
(assert (str.in_re x_44 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
