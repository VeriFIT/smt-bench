(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_18 () String)
(declare-fun x_17 () String)
(declare-fun literal_8 () String)
(declare-fun literal_10 () String)
(declare-fun literal_6 () String)
(declare-fun literal_11 () String)
(declare-fun literal_13 () String)
(declare-fun x_19 () String)
(declare-fun literal_22 () String)
(declare-fun x_23 () String)
(declare-fun literal_25 () String)
(declare-fun x_30 () String)
(declare-fun x_31 () String)
(declare-fun literal_32 () String)
(declare-fun x_33 () String)
(assert (= literal_18 "\x20\x28"))
(assert (= literal_8 "\x74\x79\x70\x65\x75\x73\x65\x72"))
(assert (= literal_10 "\x74\x79\x70\x65\x63\x6f\x75\x72\x73\x65"))
(assert (= literal_6 "\x74\x79\x70\x65\x73\x69\x74\x65"))
(assert (= literal_11 ""))
(assert (= literal_13 "\x74\x79\x70\x65\x67\x72\x6f\x75\x70"))
(assert (or (= x_17 literal_8) (= x_17 literal_10) (= x_17 literal_6) (= x_17 literal_11) (= x_17 literal_13)))
(assert (= x_19 (str.++ literal_18 x_17)))
(assert (= literal_22 "\x29"))
(assert (= x_23 (str.++ x_19 literal_22)))
(assert (= literal_25 "\x3c\x64\x69\x76\x20\x63\x6c\x61\x73\x73\x3d\x22\x68\x65\x61\x64\x65\x72\x22\x3e\x6e\x65\x77\x65\x76\x65\x6e\x74"))
(assert (or (= x_30 literal_8) (= x_30 literal_10) (= x_30 literal_6) (= x_30 literal_11) (= x_30 literal_13) (= x_30 x_23)))
(assert (= x_31 (str.++ literal_25 x_30)))
(assert (= literal_32 "\x3c\x2f\x64\x69\x76\x3e"))
(assert (= x_33 (str.++ x_31 literal_32)))
(assert (str.in_re x_33 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
