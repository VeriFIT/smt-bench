(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun literal_35 () String)
(declare-fun x_34 () String)
(declare-fun literal_20 () String)
(declare-fun literal_32 () String)
(declare-fun x_38 () String)
(declare-fun x_40 () String)
(declare-fun literal_9 () String)
(declare-fun literal_39 () String)
(declare-fun x_41 () String)
(declare-fun literal_42 () String)
(declare-fun x_43 () String)
(declare-fun literal_44 () String)
(declare-fun x_45 () String)
(assert (= literal_35 "\x75\x70\x63\x6f\x6d\x69\x6e\x67\x65\x76\x65\x6e\x74\x73\x3a\x20"))
(assert (= literal_20 "\x2f\x63\x61\x6c\x65\x6e\x64\x61\x72\x2f\x73\x65\x74\x2e\x70\x68\x70\x3f\x76\x61\x72\x3d\x73\x65\x74\x63\x6f\x75\x72\x73\x65\x26\x61\x6d\x70\x3b\x66\x72\x6f\x6d\x3d\x75\x70\x63\x6f\x6d\x69\x6e\x67\x26\x61\x6d\x70\x3b\x69\x64\x3d"))
(assert (= literal_32 ""))
(assert (or (= x_34 literal_20) (= x_34 literal_32)))
(assert (= x_38 (str.++ literal_35 x_34)))
(assert (= literal_9 ""))
(assert (= literal_39 "\x3c\x64\x69\x76\x20\x63\x6c\x61\x73\x73\x3d\x22\x62\x75\x74\x74\x6f\x6e\x73\x22\x3e\x3c\x66\x6f\x72\x6d\x20\x61\x63\x74\x69\x6f\x6e\x3d\x22\x2f\x63\x61\x6c\x65\x6e\x64\x61\x72\x2f\x65\x76\x65\x6e\x74\x2e\x70\x68\x70\x22\x20\x6d\x65\x74\x68\x6f\x64\x3d\x22\x67\x65\x74\x22\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x22\x68\x69\x64\x64\x65\x6e\x22\x20\x6e\x61\x6d\x65\x3d\x22\x61\x63\x74\x69\x6f\x6e\x22\x20\x76\x61\x6c\x75\x65\x3d\x22\x6e\x65\x77\x22\x20\x2f\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x22\x73\x75\x62\x6d\x69\x74\x22\x20\x76\x61\x6c\x75\x65\x3d\x22\x6e\x65\x77\x65\x76\x65\x6e\x74\x22\x20\x2f\x3e\x3c\x2f\x66\x6f\x72\x6d\x3e\x3c\x2f\x64\x69\x76\x3e"))
(assert (or (= x_40 literal_9) (= x_40 literal_39)))
(assert (= x_41 (str.++ x_40 x_38)))
(assert (= literal_42 "\x3c\x64\x69\x76\x20\x63\x6c\x61\x73\x73\x3d\x22\x68\x65\x61\x64\x65\x72\x22\x3e"))
(assert (= x_43 (str.++ literal_42 x_41)))
(assert (= literal_44 "\x3c\x2f\x64\x69\x76\x3e"))
(assert (= x_45 (str.++ x_43 literal_44)))
(assert (str.in_re x_45 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
