(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun literal_10 () String)
(declare-fun x_11 () String)
(declare-fun literal_8 () String)
(declare-fun literal_6 () String)
(declare-fun literal_7 () String)
(declare-fun x_12 () String)
(declare-fun literal_15 () String)
(declare-fun x_20 () String)
(declare-fun literal_16 () String)
(declare-fun x_21 () String)
(declare-fun literal_19 () String)
(declare-fun x_22 () String)
(declare-fun literal_18 () String)
(declare-fun literal_13 () String)
(declare-fun literal_14 () String)
(declare-fun x_23 () String)
(declare-fun x_24 () String)
(declare-fun literal_27 () String)
(declare-fun x_31 () String)
(declare-fun x_32 () String)
(declare-fun literal_30 () String)
(declare-fun x_33 () String)
(declare-fun literal_26 () String)
(declare-fun literal_28 () String)
(declare-fun literal_25 () String)
(declare-fun x_34 () String)
(declare-fun x_35 () String)
(declare-fun literal_38 () String)
(declare-fun x_42 () String)
(declare-fun x_43 () String)
(declare-fun literal_41 () String)
(declare-fun x_44 () String)
(declare-fun literal_37 () String)
(declare-fun literal_39 () String)
(declare-fun literal_36 () String)
(declare-fun x_45 () String)
(declare-fun x_46 () String)
(declare-fun literal_47 () String)
(declare-fun x_48 () String)
(declare-fun x_49 () String)
(declare-fun x_50 () String)
(declare-fun x_51 () String)
(declare-fun literal_52 () String)
(declare-fun x_53 () String)
(declare-fun x_54 () String)
(declare-fun literal_55 () String)
(declare-fun x_56 () String)
(assert (= literal_10 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x72\x61\x64\x69\x6f\x27\x20\x6e\x61\x6d\x65\x3d\x27\x6c\x69\x6e\x6b\x5f\x70\x6f\x73\x69\x74\x69\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x31\x27"))
(assert (= literal_8 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_6 ""))
(assert (= literal_7 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (or (= x_11 literal_8) (= x_11 literal_6) (= x_11 literal_7)))
(assert (= x_12 (str.++ literal_10 x_11)))
(assert (= literal_15 "\x3e\x20"))
(assert (= x_20 (str.++ x_12 literal_15)))
(assert (= literal_16 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x76\x61\x6c\x69\x67\x6e\x3d\x27\x74\x6f\x70\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_21 (str.++ literal_16 sigmaStar_1)))
(assert (= literal_19 "\x3c\x62\x72\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x72\x61\x64\x69\x6f\x27\x20\x6e\x61\x6d\x65\x3d\x27\x6c\x69\x6e\x6b\x5f\x70\x6f\x73\x69\x74\x69\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x32\x27"))
(assert (= literal_18 ""))
(assert (= literal_13 ""))
(assert (= literal_14 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (or (= x_22 literal_18) (= x_22 literal_13) (= x_22 literal_14)))
(assert (= x_23 (str.++ literal_19 x_22)))
(assert (= x_24 (str.++ x_21 x_20)))
(assert (= literal_27 "\x3e\x20"))
(assert (= x_31 (str.++ x_23 literal_27)))
(assert (= x_32 (str.++ x_24 sigmaStar_3)))
(assert (= literal_30 "\x3c\x62\x72\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x72\x61\x64\x69\x6f\x27\x20\x6e\x61\x6d\x65\x3d\x27\x6c\x69\x6e\x6b\x5f\x70\x6f\x73\x69\x74\x69\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x33\x27"))
(assert (= literal_26 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_28 ""))
(assert (= literal_25 ""))
(assert (or (= x_33 literal_26) (= x_33 literal_28) (= x_33 literal_25)))
(assert (= x_34 (str.++ literal_30 x_33)))
(assert (= x_35 (str.++ x_32 x_31)))
(assert (= literal_38 "\x3e\x20"))
(assert (= x_42 (str.++ x_34 literal_38)))
(assert (= x_43 (str.++ x_35 sigmaStar_0)))
(assert (= literal_41 "\x3c\x68\x72\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x63\x68\x65\x63\x6b\x62\x6f\x78\x27\x20\x6e\x61\x6d\x65\x3d\x27\x6c\x69\x6e\x6b\x5f\x77\x69\x6e\x64\x6f\x77\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x31\x27"))
(assert (= literal_37 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_39 ""))
(assert (= literal_36 ""))
(assert (or (= x_44 literal_37) (= x_44 literal_39) (= x_44 literal_36)))
(assert (= x_45 (str.++ literal_41 x_44)))
(assert (= x_46 (str.++ x_43 x_42)))
(assert (= literal_47 "\x3e\x20"))
(assert (= x_48 (str.++ x_45 literal_47)))
(assert (= x_49 (str.++ x_46 sigmaStar_4)))
(assert (= x_50 (str.++ x_49 x_48)))
(assert (= x_51 (str.++ x_50 sigmaStar_5)))
(assert (= literal_52 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x63\x6f\x6c\x73\x70\x61\x6e\x3d\x27\x32\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x73\x75\x62\x6d\x69\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x73\x61\x76\x65\x6c\x69\x6e\x6b\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_53 (str.++ x_51 literal_52)))
(assert (= x_54 (str.++ x_53 sigmaStar_2)))
(assert (= literal_55 "\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x2f\x74\x61\x62\x6c\x65\x3e\x0d\x0a\x3c\x2f\x66\x6f\x72\x6d\x3e\x5c\x6e"))
(assert (= x_56 (str.++ x_54 literal_55)))
(assert (str.in_re x_56 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
