(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun literal_0 () String)
(declare-fun x_2 () String)
(declare-fun epsilon () String)
(declare-fun literal_1 () String)
(declare-fun x_3 () String)
(declare-fun literal_4 () String)
(declare-fun x_5 () String)
(declare-fun x_6 () String)
(declare-fun x_7 () String)
(declare-fun literal_8 () String)
(declare-fun x_9 () String)
(assert (= literal_0 "\x2f\x6d\x6f\x64\x2f\x67\x6c\x6f\x73\x73\x61\x72\x79\x2f\x66\x6f\x72\x6d\x61\x74\x73\x2f"))
(assert (= epsilon ""))
(assert (= literal_1 "\x64\x69\x63\x74\x69\x6f\x6e\x61\x72\x79"))
(assert (or (= x_2 epsilon) (= x_2 literal_1)))
(assert (= x_3 (str.++ literal_0 x_2)))
(assert (= literal_4 "\x2f"))
(assert (= x_5 (str.++ x_3 literal_4)))
(assert (or (= x_6 epsilon) (= x_6 literal_1)))
(assert (= x_7 (str.++ x_5 x_6)))
(assert (= literal_8 "\x5f\x66\x6f\x72\x6d\x61\x74\x2e\x70\x68\x70"))
(assert (= x_9 (str.++ x_7 literal_8)))
(assert (str.in_re x_9 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x2f\x65\x76\x69\x6c") (re.* re.allchar)))))
(check-sat)
(exit)
