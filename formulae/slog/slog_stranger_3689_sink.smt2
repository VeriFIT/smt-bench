(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun literal_7 () String)
(declare-fun x_10 () String)
(declare-fun literal_3 () String)
(declare-fun literal_6 () String)
(declare-fun literal_4 () String)
(declare-fun x_14 () String)
(declare-fun literal_13 () String)
(declare-fun x_15 () String)
(declare-fun literal_8 () String)
(declare-fun literal_9 () String)
(declare-fun literal_11 () String)
(declare-fun x_17 () String)
(declare-fun literal_16 () String)
(declare-fun x_18 () String)
(declare-fun literal_19 () String)
(declare-fun x_20 () String)
(declare-fun x_21 () String)
(declare-fun x_22 () String)
(declare-fun x_23 () String)
(declare-fun literal_24 () String)
(declare-fun x_25 () String)
(declare-fun x_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_28 () String)
(assert (= literal_7 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6f\x6c\x73\x70\x61\x6e\x3d\x27\x32\x27\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x62\x72\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x63\x68\x65\x63\x6b\x62\x6f\x78\x27\x20\x6e\x61\x6d\x65\x3d\x27\x70\x68\x6f\x74\x6f\x5f\x63\x6f\x6d\x6d\x65\x6e\x74\x73\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x79\x65\x73\x27"))
(assert (= literal_3 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_6 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_4 ""))
(assert (or (= x_10 literal_3) (= x_10 literal_6) (= x_10 literal_4)))
(assert (= x_14 (str.++ literal_7 x_10)))
(assert (= literal_13 "\x3c\x62\x72\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x63\x68\x65\x63\x6b\x62\x6f\x78\x27\x20\x6e\x61\x6d\x65\x3d\x27\x70\x68\x6f\x74\x6f\x5f\x72\x61\x74\x69\x6e\x67\x73\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x79\x65\x73\x27"))
(assert (= literal_8 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_9 ""))
(assert (= literal_11 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (or (= x_15 literal_8) (= x_15 literal_9) (= x_15 literal_11)))
(assert (= x_17 (str.++ literal_13 x_15)))
(assert (= literal_16 "\x3e\x20"))
(assert (= x_18 (str.++ x_14 literal_16)))
(assert (= literal_19 "\x3e\x20"))
(assert (= x_20 (str.++ x_17 literal_19)))
(assert (= x_21 (str.++ x_18 sigmaStar_0)))
(assert (= x_22 (str.++ x_21 x_20)))
(assert (= x_23 (str.++ x_22 sigmaStar_1)))
(assert (= literal_24 "\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x73\x75\x62\x6d\x69\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x73\x61\x76\x65\x5f\x70\x68\x6f\x74\x6f\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_25 (str.++ x_23 literal_24)))
(assert (= x_26 (str.++ x_25 sigmaStar_2)))
(assert (= literal_27 "\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x3e\x5c\x6e"))
(assert (= x_28 (str.++ x_26 literal_27)))
(assert (str.in_re x_28 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
