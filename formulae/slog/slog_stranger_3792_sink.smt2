(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun literal_7 () String)
(declare-fun x_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_10 () String)
(declare-fun sigmaStar_17 () String)
(declare-fun literal_18 () String)
(declare-fun x_19 () String)
(declare-fun x_20 () String)
(declare-fun x_21 () String)
(declare-fun literal_22 () String)
(declare-fun x_23 () String)
(declare-fun x_24 () String)
(declare-fun literal_25 () String)
(declare-fun x_26 () String)
(declare-fun x_27 () String)
(declare-fun x_28 () String)
(declare-fun literal_29 () String)
(declare-fun x_30 () String)
(declare-fun x_31 () String)
(declare-fun literal_32 () String)
(declare-fun x_33 () String)
(assert (= literal_7 "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x3e\x0d\x0a"))
(assert (= x_8 (str.++ literal_7 sigmaStar_3)))
(assert (= literal_9 "\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x65\x6d\x62\x65\x72\x73\x2e\x70\x68\x70"))
(assert (= x_10 (str.++ x_8 literal_9)))
(assert (= literal_18 "\x3f\x61\x69\x64\x3d"))
(assert (= x_19 (str.++ literal_18 sigmaStar_17)))
(assert (or (= x_20 x_19) (= x_20 sigmaStar_1)))
(assert (= x_21 (str.++ x_10 x_20)))
(assert (= literal_22 "\x27\x3e"))
(assert (= x_23 (str.++ x_21 literal_22)))
(assert (= x_24 (str.++ x_23 sigmaStar_0)))
(assert (= literal_25 "\x3c\x2f\x61\x3e\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x69\x6e\x64\x65\x78\x2e\x70\x68\x70"))
(assert (= x_26 (str.++ x_24 literal_25)))
(assert (or (= x_27 x_19) (= x_27 sigmaStar_4)))
(assert (= x_28 (str.++ x_26 x_27)))
(assert (= literal_29 "\x27\x3e"))
(assert (= x_30 (str.++ x_28 literal_29)))
(assert (= x_31 (str.++ x_30 sigmaStar_5)))
(assert (= literal_32 "\x3c\x2f\x61\x3e\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x5c\x6e"))
(assert (= x_33 (str.++ x_31 literal_32)))
(assert (str.in_re x_33 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
