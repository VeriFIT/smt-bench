(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun literal_4 () String)
(declare-fun x_3 () String)
(declare-fun literal_1 () String)
(declare-fun x_10 () String)
(declare-fun x_25 () String)
(declare-fun literal_20 () String)
(declare-fun literal_19 () String)
(declare-fun literal_15 () String)
(declare-fun literal_17 () String)
(declare-fun literal_18 () String)
(declare-fun literal_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_33 () String)
(declare-fun x_34 () String)
(declare-fun literal_35 () String)
(declare-fun x_36 () String)
(assert (= literal_4 "\x5f"))
(assert (= literal_1 ""))
(assert (or (= x_3 sigmaStar_0) (= x_3 literal_1)))
(assert (= x_10 (str.++ literal_4 x_3)))
(assert (= literal_20 "\x72\x65\x67\x69\x73\x74\x65\x72\x2d\x66\x6f\x75\x6e\x64\x70\x61\x73\x73\x77\x64"))
(assert (= literal_19 "\x72\x65\x67\x69\x73\x74\x65\x72\x2d\x66\x69\x6e\x61\x6c"))
(assert (= literal_15 "\x72\x65\x67\x69\x73\x74\x65\x72\x2d\x63\x6f\x6e\x64\x69\x74\x69\x6f\x6e\x73"))
(assert (= literal_17 "\x72\x65\x67\x69\x73\x74\x65\x72\x2d\x6c\x6f\x73\x74\x70\x61\x73\x73\x77\x64"))
(assert (= literal_18 "\x72\x65\x67\x69\x73\x74\x65\x72"))
(assert (= literal_11 "\x72\x65\x67\x69\x73\x74\x65\x72\x2d\x6c\x6f\x73\x74\x70\x61\x73\x73\x77\x64\x6d\x61\x69\x6c"))
(assert (= literal_12 "\x72\x65\x67\x69\x73\x74\x65\x72\x2d\x6d\x61\x69\x6c"))
(assert (or (= x_25 literal_20) (= x_25 literal_19) (= x_25 literal_15) (= x_25 literal_17) (= x_25 literal_18) (= x_25 literal_11) (= x_25 literal_12)))
(assert (= x_26 (str.++ x_25 x_10)))
(assert (= literal_27 "\x74\x70\x6c\x2f"))
(assert (or (= x_33 literal_20) (= x_33 literal_19) (= x_33 literal_15) (= x_33 literal_17) (= x_33 literal_18) (= x_33 literal_11) (= x_33 x_26) (= x_33 literal_12)))
(assert (= x_34 (str.++ literal_27 x_33)))
(assert (= literal_35 "\x2e\x68\x74\x6d\x6c"))
(assert (= x_36 (str.++ x_34 literal_35)))
(assert (str.in_re x_36 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x2f\x65\x76\x69\x6c") (re.* re.allchar)))))
(check-sat)
(exit)
