(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun literal_4 () String)
(declare-fun x_5 () String)
(declare-fun literal_6 () String)
(declare-fun x_7 () String)
(declare-fun x_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_10 () String)
(declare-fun x_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_13 () String)
(declare-fun x_14 () String)
(declare-fun literal_15 () String)
(declare-fun x_16 () String)
(assert (= literal_4 "\x3c\x73\x63\x72\x69\x70\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x2f\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x27\x3e\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x76\x61\x6c\x69\x64\x61\x74\x65\x4c\x69\x6e\x6b\x28\x66\x72\x6d\x29\x20\x7b\x0d\x0a\x09\x69\x66\x20\x28\x66\x72\x6d\x2e\x6c\x69\x6e\x6b\x5f\x6e\x61\x6d\x65\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x20\x7c\x7c\x20\x66\x72\x6d\x2e\x6c\x69\x6e\x6b\x5f\x6e\x61\x6d\x65\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x20\x7c\x7c\x20\x66\x72\x6d\x2e\x6c\x69\x6e\x6b\x5f\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x29\x20\x7b\x0d\x0a\x09\x09\x61\x6c\x65\x72\x74\x28\x22"))
(assert (= x_5 (str.++ literal_4 sigmaStar_2)))
(assert (= literal_6 "\x22\x29\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x66\x61\x6c\x73\x65\x3b\x0d\x0a\x09\x7d\x0d\x0a\x7d\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x76\x61\x6c\x69\x64\x61\x74\x65\x4e\x65\x77\x73\x28\x66\x72\x6d\x29\x20\x7b\x0d\x0a\x09\x69\x66\x20\x28\x66\x72\x6d\x2e\x6e\x65\x77\x73\x5f\x73\x75\x62\x6a\x65\x63\x74\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x20\x7c\x7c\x20\x66\x72\x6d\x2e\x6e\x65\x77\x73\x5f\x62\x6f\x64\x79\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x29\x20\x7b\x0d\x0a\x09\x09\x61\x6c\x65\x72\x74\x28\x22"))
(assert (= x_7 (str.++ x_5 literal_6)))
(assert (= x_8 (str.++ x_7 sigmaStar_3)))
(assert (= literal_9 "\x22\x29\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x66\x61\x6c\x73\x65\x3b\x0d\x0a\x09\x7d\x0d\x0a\x7d\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x76\x61\x6c\x69\x64\x61\x74\x65\x41\x72\x74\x69\x63\x6c\x65\x28\x66\x72\x6d\x29\x20\x7b\x0d\x0a\x09\x69\x66\x20\x28\x66\x72\x6d\x2e\x61\x72\x74\x69\x63\x6c\x65\x5f\x73\x75\x62\x6a\x65\x63\x74\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x20\x7c\x7c\x20\x66\x72\x6d\x2e\x61\x72\x74\x69\x63\x6c\x65\x5f\x73\x6e\x69\x70\x70\x65\x74\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x20\x7c\x7c\x20\x66\x72\x6d\x2e\x61\x72\x74\x69\x63\x6c\x65\x5f\x62\x6f\x64\x79\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x29\x20\x7b\x0d\x0a\x09\x09\x61\x6c\x65\x72\x74\x28\x22"))
(assert (= x_10 (str.++ x_8 literal_9)))
(assert (= x_11 (str.++ x_10 sigmaStar_0)))
(assert (= literal_12 "\x22\x29\x3b\x0d\x0a\x09\x09\x72\x65\x74\x75\x72\x6e\x20\x66\x61\x6c\x73\x65\x3b\x0d\x0a\x09\x7d\x0d\x0a\x7d\x0d\x0a\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x76\x61\x6c\x69\x64\x61\x74\x65\x50\x68\x6f\x74\x6f\x28\x66\x72\x6d\x29\x20\x7b\x0d\x0a\x09\x69\x66\x20\x28\x66\x72\x6d\x2e\x70\x68\x6f\x74\x6f\x5f\x74\x69\x74\x6c\x65\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x20\x7c\x7c\x20\x66\x72\x6d\x2e\x70\x68\x6f\x74\x6f\x5f\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x20\x7c\x7c\x20\x66\x72\x6d\x2e\x70\x68\x6f\x74\x6f\x5f\x70\x69\x63\x5f\x66\x69\x6c\x65\x2e\x76\x61\x6c\x75\x65\x3d\x3d\x22\x22\x29\x20\x7b\x0d\x0a\x09\x09\x61\x6c\x65\x72\x74\x28\x22"))
(assert (= x_13 (str.++ x_11 literal_12)))
(assert (= x_14 (str.++ x_13 sigmaStar_1)))
(assert (= literal_15 "\x22\x29\x3b\x0d\x0a\x09\x09\x72\x65\x74\x75\x72\x6e\x20\x66\x61\x6c\x73\x65\x3b\x0d\x0a\x09\x7d\x0d\x0a\x7d\x0d\x0a\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x5c\x6e"))
(assert (= x_16 (str.++ x_14 literal_15)))
(assert (str.in_re x_16 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
