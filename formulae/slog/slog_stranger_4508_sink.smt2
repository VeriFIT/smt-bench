(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun sigmaStar_10 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_13 () String)
(declare-fun literal_14 () String)
(declare-fun x_15 () String)
(declare-fun x_18 () String)
(declare-fun epsilon () String)
(declare-fun x_19 () String)
(declare-fun literal_20 () String)
(declare-fun x_21 () String)
(declare-fun x_22 () String)
(declare-fun literal_23 () String)
(declare-fun x_24 () String)
(declare-fun x_25 () String)
(declare-fun literal_26 () String)
(declare-fun x_27 () String)
(declare-fun x_28 () String)
(declare-fun literal_29 () String)
(declare-fun x_30 () String)
(declare-fun x_31 () String)
(declare-fun x_32 () String)
(declare-fun literal_33 () String)
(declare-fun x_34 () String)
(declare-fun x_35 () String)
(declare-fun literal_36 () String)
(declare-fun x_39 () String)
(declare-fun x_40 () String)
(declare-fun literal_37 () String)
(declare-fun literal_38 () String)
(declare-fun x_41 () String)
(declare-fun literal_42 () String)
(declare-fun x_43 () String)
(declare-fun x_44 () String)
(declare-fun literal_45 () String)
(declare-fun x_48 () String)
(declare-fun x_49 () String)
(declare-fun literal_46 () String)
(declare-fun literal_47 () String)
(declare-fun x_50 () String)
(declare-fun literal_51 () String)
(declare-fun x_52 () String)
(declare-fun x_53 () String)
(declare-fun literal_54 () String)
(declare-fun x_55 () String)
(declare-fun x_56 () String)
(declare-fun literal_57 () String)
(declare-fun x_58 () String)
(declare-fun x_59 () String)
(declare-fun literal_60 () String)
(declare-fun x_61 () String)
(declare-fun x_62 () String)
(declare-fun literal_63 () String)
(declare-fun x_64 () String)
(assert (= literal_12 "\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_13 (str.++ literal_12 sigmaStar_0)))
(assert (= literal_14 "\x3c\x73\x70\x61\x6e\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x23\x66\x66\x30\x30\x30\x30\x27\x3e\x2a\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x6e\x61\x6d\x65\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_15 (str.++ x_13 literal_14)))
(assert (= epsilon ""))
(assert (or (= x_18 epsilon) (= x_18 sigmaStar_6)))
(assert (= x_19 (str.++ x_15 x_18)))
(assert (= literal_20 "\x27\x20\x6d\x61\x78\x6c\x65\x6e\x67\x74\x68\x3d\x27\x33\x30\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x32\x30\x30\x70\x78\x3b\x27\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_21 (str.++ x_19 literal_20)))
(assert (= x_22 (str.++ x_21 sigmaStar_1)))
(assert (= literal_23 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x70\x61\x73\x73\x77\x6f\x72\x64\x27\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x6e\x65\x77\x70\x61\x73\x73\x77\x6f\x72\x64\x27\x20\x6d\x61\x78\x6c\x65\x6e\x67\x74\x68\x3d\x27\x32\x30\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x32\x30\x30\x70\x78\x3b\x27\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_24 (str.++ x_22 literal_23)))
(assert (= x_25 (str.++ x_24 sigmaStar_11)))
(assert (= literal_26 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x70\x61\x73\x73\x77\x6f\x72\x64\x27\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x6e\x65\x77\x70\x61\x73\x73\x77\x6f\x72\x64\x32\x27\x20\x6d\x61\x78\x6c\x65\x6e\x67\x74\x68\x3d\x27\x32\x30\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x32\x30\x30\x70\x78\x3b\x27\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_27 (str.++ x_25 literal_26)))
(assert (= x_28 (str.++ x_27 sigmaStar_4)))
(assert (= literal_29 "\x3c\x73\x70\x61\x6e\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x23\x66\x66\x30\x30\x30\x30\x27\x3e\x2a\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x65\x6d\x61\x69\x6c\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_30 (str.++ x_28 literal_29)))
(assert (or (= x_31 epsilon) (= x_31 sigmaStar_9)))
(assert (= x_32 (str.++ x_30 x_31)))
(assert (= literal_33 "\x27\x20\x6d\x61\x78\x6c\x65\x6e\x67\x74\x68\x3d\x27\x31\x30\x30\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x32\x30\x30\x70\x78\x3b\x27\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_34 (str.++ x_32 literal_33)))
(assert (= x_35 (str.++ x_34 sigmaStar_3)))
(assert (= literal_36 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x72\x61\x64\x69\x6f\x27\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x68\x69\x64\x65\x5f\x65\x6d\x61\x69\x6c\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x31\x27"))
(assert (= x_39 (str.++ x_35 literal_36)))
(assert (= literal_37 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_38 ""))
(assert (or (= x_40 literal_37) (= x_40 literal_38)))
(assert (= x_41 (str.++ x_39 x_40)))
(assert (= literal_42 "\x3e"))
(assert (= x_43 (str.++ x_41 literal_42)))
(assert (= x_44 (str.++ x_43 sigmaStar_5)))
(assert (= literal_45 "\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x72\x61\x64\x69\x6f\x27\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x68\x69\x64\x65\x5f\x65\x6d\x61\x69\x6c\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x30\x27"))
(assert (= x_48 (str.++ x_44 literal_45)))
(assert (= literal_46 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_47 ""))
(assert (or (= x_49 literal_46) (= x_49 literal_47)))
(assert (= x_50 (str.++ x_48 x_49)))
(assert (= literal_51 "\x3e"))
(assert (= x_52 (str.++ x_50 literal_51)))
(assert (= x_53 (str.++ x_52 sigmaStar_2)))
(assert (= literal_54 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_55 (str.++ x_53 literal_54)))
(assert (= x_56 (str.++ x_55 sigmaStar_10)))
(assert (= literal_57 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= x_58 (str.++ x_56 literal_57)))
(assert (= x_59 (str.++ x_58 sigmaStar_8)))
(assert (= literal_60 "\x27\x20\x6d\x61\x78\x6c\x65\x6e\x67\x74\x68\x3d\x27\x35\x30\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x32\x30\x30\x70\x78\x3b\x27\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e"))
(assert (= x_61 (str.++ x_59 literal_60)))
(assert (= x_62 (str.++ x_61 sigmaStar_7)))
(assert (= literal_63 "\x20\x3c\x73\x70\x61\x6e\x20\x63\x6c\x61\x73\x73\x3d\x27\x73\x6d\x61\x6c\x6c\x32\x27\x3e\x28\x6d\x6d\x2f\x64\x64\x2f\x79\x79\x79\x79\x29\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x27\x3e\x3c\x73\x65\x6c\x65\x63\x74\x20\x6e\x61\x6d\x65\x3d\x27\x75\x73\x65\x72\x5f\x6d\x6f\x6e\x74\x68\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x3e\x5c\x6e\x3c\x6f\x70\x74\x69\x6f\x6e\x3e\x2d\x2d\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x5c\x6e"))
(assert (= x_64 (str.++ x_62 literal_63)))
(assert (str.in_re x_64 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
