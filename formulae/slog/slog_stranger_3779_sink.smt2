(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun sigmaStar_10 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun sigmaStar_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_19 () String)
(declare-fun literal_14 () String)
(declare-fun x_20 () String)
(declare-fun literal_18 () String)
(declare-fun x_21 () String)
(declare-fun literal_15 () String)
(declare-fun x_23 () String)
(declare-fun literal_16 () String)
(declare-fun x_25 () String)
(declare-fun x_26 () String)
(declare-fun x_27 () String)
(declare-fun literal_17 () String)
(declare-fun x_28 () String)
(declare-fun x_30 () String)
(declare-fun x_31 () String)
(declare-fun x_33 () String)
(declare-fun x_34 () String)
(declare-fun literal_22 () String)
(declare-fun x_35 () String)
(declare-fun literal_24 () String)
(declare-fun x_40 () String)
(declare-fun x_39 () String)
(declare-fun x_42 () String)
(declare-fun literal_43 () String)
(declare-fun x_50 () String)
(declare-fun x_51 () String)
(declare-fun literal_52 () String)
(declare-fun x_54 () String)
(declare-fun literal_53 () String)
(declare-fun x_55 () String)
(declare-fun x_56 () String)
(declare-fun sigmaStar_63 () String)
(declare-fun literal_64 () String)
(declare-fun x_65 () String)
(declare-fun x_66 () String)
(declare-fun x_67 () String)
(declare-fun literal_68 () String)
(declare-fun x_69 () String)
(declare-fun x_70 () String)
(declare-fun literal_71 () String)
(declare-fun x_72 () String)
(declare-fun x_73 () String)
(declare-fun x_74 () String)
(declare-fun literal_75 () String)
(declare-fun x_76 () String)
(declare-fun x_77 () String)
(declare-fun literal_78 () String)
(declare-fun x_79 () String)
(assert (= literal_13 "\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_19 (str.++ sigmaStar_0 literal_13)))
(assert (= literal_14 "\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_20 (str.++ sigmaStar_12 literal_14)))
(assert (= literal_18 ""))
(assert (= x_21 (str.++ literal_18 x_20)))
(assert (= literal_15 "\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_23 (str.++ sigmaStar_6 literal_15)))
(assert (= literal_16 "\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_25 (str.++ sigmaStar_8 literal_16)))
(assert (or (= x_26 x_21) (= x_26 literal_18)))
(assert (= x_27 (str.++ x_26 x_25)))
(assert (= literal_17 "\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_28 (str.++ sigmaStar_10 literal_17)))
(assert (or (= x_30 x_21) (= x_30 literal_18) (= x_30 x_27)))
(assert (= x_31 (str.++ x_30 x_28)))
(assert (or (= x_33 x_21) (= x_33 literal_18) (= x_33 x_27)))
(assert (= x_34 (str.++ x_33 x_19)))
(assert (= literal_22 "\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_35 (str.++ sigmaStar_1 literal_22)))
(assert (= literal_24 "\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_40 (str.++ sigmaStar_11 literal_24)))
(assert (or (= x_39 x_21) (= x_39 x_31) (= x_39 literal_18) (= x_39 x_27) (= x_39 x_34)))
(assert (= x_42 (str.++ x_39 x_23)))
(assert (= literal_43 "\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a"))
(assert (or (= x_50 x_21) (= x_50 x_31) (= x_50 x_42) (= x_50 x_40) (= x_50 literal_18) (= x_50 x_27) (= x_50 x_35) (= x_50 x_34)))
(assert (= x_51 (str.++ literal_43 x_50)))
(assert (= literal_52 "\x3c\x62\x72\x3e\x0d\x0a\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x65\x6d\x62\x65\x72\x73\x2e\x70\x68\x70"))
(assert (= x_54 (str.++ x_51 literal_52)))
(assert (= literal_53 "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x3e\x0d\x0a"))
(assert (= x_55 (str.++ literal_53 sigmaStar_2)))
(assert (= x_56 (str.++ x_55 x_54)))
(assert (= literal_64 "\x3f\x61\x69\x64\x3d"))
(assert (= x_65 (str.++ literal_64 sigmaStar_63)))
(assert (or (= x_66 x_65) (= x_66 sigmaStar_9)))
(assert (= x_67 (str.++ x_56 x_66)))
(assert (= literal_68 "\x27\x3e"))
(assert (= x_69 (str.++ x_67 literal_68)))
(assert (= x_70 (str.++ x_69 sigmaStar_7)))
(assert (= literal_71 "\x3c\x2f\x61\x3e\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x69\x6e\x64\x65\x78\x2e\x70\x68\x70"))
(assert (= x_72 (str.++ x_70 literal_71)))
(assert (or (= x_73 x_65) (= x_73 sigmaStar_4)))
(assert (= x_74 (str.++ x_72 x_73)))
(assert (= literal_75 "\x27\x3e"))
(assert (= x_76 (str.++ x_74 literal_75)))
(assert (= x_77 (str.++ x_76 sigmaStar_5)))
(assert (= literal_78 "\x3c\x2f\x61\x3e\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x0d\x0a\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x5c\x6e"))
(assert (= x_79 (str.++ x_77 literal_78)))
(assert (str.in_re x_79 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
