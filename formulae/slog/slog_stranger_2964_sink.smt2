(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_6 () String)
(declare-fun literal_7 () String)
(declare-fun x_8 () String)
(declare-fun sigmaStar_13 () String)
(declare-fun literal_14 () String)
(declare-fun x_15 () String)
(declare-fun x_16 () String)
(declare-fun x_17 () String)
(declare-fun literal_18 () String)
(declare-fun x_19 () String)
(assert (= literal_5 "\x6d\x65\x73\x73\x61\x67\x65\x5f\x74\x6f\x3d\x27"))
(assert (= x_6 (str.++ literal_5 sigmaStar_2)))
(assert (= literal_7 "\x27\x20\x41\x4e\x44\x20\x6d\x65\x73\x73\x61\x67\x65\x5f\x72\x65\x61\x64\x3d\x27\x30\x27\x41\x4e\x44\x20\x6d\x65\x73\x73\x61\x67\x65\x5f\x66\x6f\x6c\x64\x65\x72\x3d\x27\x30\x27"))
(assert (= x_8 (str.++ x_6 literal_7)))
(assert (= literal_14 "\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x3e\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x65\x73\x73\x61\x67\x65\x73\x2e\x70\x68\x70\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x73\x69\x64\x65\x27\x3e"))
(assert (= x_15 (str.++ literal_14 sigmaStar_13)))
(assert (or (= x_16 sigmaStar_1) (= x_16 sigmaStar_0)))
(assert (= x_17 (str.++ x_15 x_16)))
(assert (= literal_18 "\x3c\x2f\x61\x3e\x3c\x2f\x62\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x5c\x6e"))
(assert (= x_19 (str.++ x_17 literal_18)))
(assert (str.in_re x_19 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
