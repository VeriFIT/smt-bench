(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun literal_11 () String)
(declare-fun x_10 () String)
(declare-fun x_12 () String)
(declare-fun sigmaStar_42 () String)
(declare-fun sigmaStar_46 () String)
(declare-fun literal_32 () String)
(declare-fun literal_39 () String)
(declare-fun x_49 () String)
(declare-fun literal_44 () String)
(declare-fun x_50 () String)
(declare-fun literal_45 () String)
(declare-fun x_51 () String)
(declare-fun literal_48 () String)
(declare-fun x_52 () String)
(declare-fun x_47 () String)
(declare-fun x_54 () String)
(declare-fun literal_55 () String)
(declare-fun x_60 () String)
(declare-fun epsilon () String)
(declare-fun literal_53 () String)
(declare-fun x_61 () String)
(declare-fun literal_62 () String)
(declare-fun x_63 () String)
(declare-fun literal_64 () String)
(declare-fun x_65 () String)
(assert (= literal_11 "\x5c\x4c\x61\x72\x67\x65\x20"))
(assert (= x_10 sigmaStar_8))
(assert (= x_12 (str.++ literal_11 x_10)))
(assert (= literal_32 "\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x2e\x65\x78\x65"))
(assert (= x_47 (str.replace literal_32 "\x20" "\x5e\x20")))
(assert (= literal_39 "\x20\x2b\x2b\x20\x2d\x65\x20\x20\x5c\x22\x2f\x2f\x2e\x67\x69\x66\x5c\x22\x20"))
(assert (= x_49 (str.++ literal_39 sigmaStar_42)))
(assert (= literal_44 "\x5c\x22\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x2e\x64\x61\x72\x77\x69\x6e\x5c\x22\x20\x2d\x65\x20\x5c\x22\x2f\x2f\x2e\x67\x69\x66\x5c\x22\x20"))
(assert (= x_50 (str.++ literal_44 sigmaStar_42)))
(assert (= literal_45 "\x5c\x22\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x2e\x6c\x69\x6e\x75\x78\x5c\x22\x20\x2d\x65\x20\x5c\x22\x2f\x2f\x2e\x67\x69\x66\x5c\x22\x20"))
(assert (= x_51 (str.++ literal_45 sigmaStar_42)))
(assert (= literal_48 "\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x20\x2d\x65\x20\x2f\x2f\x2e\x67\x69\x66\x20"))
(assert (= x_52 (str.++ literal_48 sigmaStar_42)))
(assert (= x_54 (str.++ x_47 x_49)))
(assert (= literal_55 "\x54\x68\x65\x20\x73\x68\x65\x6c\x6c\x20\x63\x6f\x6d\x6d\x61\x6e\x64\x3c\x62\x72\x20\x2f\x3e"))
(assert (= epsilon ""))
(assert (= literal_53 ""))
(assert (or (= x_60 epsilon) (= x_60 x_54) (= x_60 literal_53) (= x_60 x_52) (= x_60 x_51) (= x_60 x_50)))
(assert (= x_61 (str.++ literal_55 x_60)))
(assert (= literal_62 "\x3c\x62\x72\x20\x2f\x3e\x72\x65\x74\x75\x72\x6e\x65\x64\x20\x73\x74\x61\x74\x75\x73\x20\x3d\x20"))
(assert (= x_63 (str.++ x_61 literal_62)))
(assert (= literal_64 "\x3c\x62\x72\x20\x2f\x3e\x5c\x6e"))
(assert (= x_65 (str.++ x_63 literal_64)))
(assert (str.in_re x_65 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
