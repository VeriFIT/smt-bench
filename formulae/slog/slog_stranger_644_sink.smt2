(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun literal_25 () String)
(declare-fun x_26 () String)
(declare-fun literal_21 () String)
(declare-fun literal_24 () String)
(declare-fun x_27 () String)
(declare-fun literal_28 () String)
(declare-fun x_29 () String)
(declare-fun literal_30 () String)
(declare-fun x_31 () String)
(declare-fun literal_32 () String)
(declare-fun x_33 () String)
(declare-fun literal_34 () String)
(declare-fun x_35 () String)
(declare-fun literal_37 () String)
(declare-fun x_38 () String)
(declare-fun literal_36 () String)
(declare-fun x_39 () String)
(declare-fun literal_40 () String)
(declare-fun x_41 () String)
(assert (= literal_25 "\x3c\x66\x6f\x72\x6d\x20\x61\x63\x74\x69\x6f\x6e\x3d\x22\x69\x6e\x64\x65\x78\x2e\x70\x68\x70\x22\x20\x6d\x65\x74\x68\x6f\x64\x3d\x22\x67\x65\x74\x22\x3e\x5c\x6e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x22\x68\x69\x64\x64\x65\x6e\x22\x20\x6e\x61\x6d\x65\x3d\x22\x69\x64\x22\x20\x76\x61\x6c\x75\x65\x3d\x22\x22\x20\x2f\x3e\x5c\x6e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x22\x68\x69\x64\x64\x65\x6e\x22\x20\x6e\x61\x6d\x65\x3d\x22\x6f\x6c\x64\x6d\x6f\x64\x22\x20\x76\x61\x6c\x75\x65\x3d\x22\x6d\x6f\x64\x75\x6c\x65\x69\x64\x22\x20\x2f\x3e\x5c\x6e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x22\x68\x69\x64\x64\x65\x6e\x22\x20\x6e\x61\x6d\x65\x3d\x22\x69\x6e\x73\x74\x61\x6e\x63\x65\x69\x64\x22\x20\x76\x61\x6c\x75\x65\x3d\x22"))
(assert (= literal_21 "\x69\x6e\x73\x74\x61\x6e\x63\x65\x69\x64"))
(assert (= literal_24 "\x30"))
(assert (or (= x_26 literal_21) (= x_26 literal_24)))
(assert (= x_27 (str.++ literal_25 x_26)))
(assert (= literal_28 "\x22\x20\x2f\x3e"))
(assert (= x_29 (str.++ x_27 literal_28)))
(assert (= literal_30 "\x5c\x6e"))
(assert (= x_31 (str.++ x_29 literal_30)))
(assert (= literal_32 "\x3c\x74\x61\x62\x6c\x65\x20\x61\x6c\x69\x67\x6e\x3d\x22\x63\x65\x6e\x74\x65\x72\x22\x20\x63\x65\x6c\x6c\x70\x61\x64\x64\x69\x6e\x67\x3d\x22\x31\x30\x22\x3e\x3c\x74\x72\x3e"))
(assert (= x_33 (str.++ x_31 literal_32)))
(assert (= literal_34 "\x5c\x6e"))
(assert (= x_35 (str.++ x_33 literal_34)))
(assert (= literal_37 "\x3c\x74\x64\x3e\x5c\x6e"))
(assert (= x_38 (str.++ x_35 literal_37)))
(assert (= literal_36 "\x61\x63\x74\x69\x76\x69\x74\x79\x6d\x6f\x64\x75\x6c\x65"))
(assert (= x_39 (str.++ x_38 literal_36)))
(assert (= literal_40 "\x26\x6e\x62\x73\x70\x3b"))
(assert (= x_41 (str.++ x_39 literal_40)))
(assert (str.in_re x_41 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
