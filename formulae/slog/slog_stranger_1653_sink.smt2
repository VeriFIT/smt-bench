(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun literal_19 () String)
(declare-fun x_18 () String)
(declare-fun literal_10 () String)
(declare-fun literal_6 () String)
(declare-fun literal_11 () String)
(declare-fun literal_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_20 () String)
(declare-fun literal_23 () String)
(declare-fun x_24 () String)
(declare-fun literal_22 () String)
(declare-fun x_25 () String)
(declare-fun literal_21 () String)
(declare-fun x_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_28 () String)
(assert (= literal_19 "\x26\x6d\x6f\x64\x65\x3d"))
(assert (= literal_10 "\x6e\x6f\x72\x6d\x61\x6c"))
(assert (= literal_6 "\x6d\x6f\x64\x65"))
(assert (= literal_11 "\x72\x65\x76\x69\x65\x77"))
(assert (= literal_12 "\x6e\x6f\x72\x6d\x61\x6c"))
(assert (= literal_13 "\x6e\x6f\x72\x6d\x61\x6c"))
(assert (or (= x_18 literal_10) (= x_18 literal_6) (= x_18 literal_11) (= x_18 literal_12) (= x_18 literal_13)))
(assert (= x_20 (str.++ literal_19 x_18)))
(assert (= literal_23 "\x20\x20\x20\x20\x3c\x73\x63\x72\x69\x70\x74\x20\x6c\x61\x6e\x67\x75\x61\x67\x65\x3d\x22\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x22\x3e\x76\x61\x72\x20\x70\x72\x65\x76\x3d\x22\x2f\x6d\x6f\x64\x2f\x73\x63\x6f\x72\x6d\x2f\x70\x6c\x61\x79\x65\x72\x2e\x70\x68\x70\x3f\x69\x64\x3d\x26\x63\x75\x72\x72\x65\x6e\x74\x6f\x72\x67\x3d\x63\x75\x72\x72\x65\x6e\x74\x6f\x72\x67"))
(assert (= literal_22 ""))
(assert (or (= x_24 x_20) (= x_24 literal_22)))
(assert (= x_25 (str.++ literal_23 x_24)))
(assert (= literal_21 "\x26\x73\x63\x6f\x69\x64\x3d"))
(assert (= x_26 (str.++ x_25 literal_21)))
(assert (= literal_27 "\x22\x3b\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x5c\x6e"))
(assert (= x_28 (str.++ x_26 literal_27)))
(assert (str.in_re x_28 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
