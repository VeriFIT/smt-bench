(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_12 () String)
(declare-fun x_13 () String)
(declare-fun literal_14 () String)
(declare-fun x_15 () String)
(declare-fun x_16 () String)
(declare-fun literal_18 () String)
(declare-fun x_22 () String)
(declare-fun literal_17 () String)
(declare-fun x_21 () String)
(declare-fun literal_20 () String)
(declare-fun literal_19 () String)
(declare-fun x_24 () String)
(declare-fun x_28 () String)
(declare-fun literal_27 () String)
(declare-fun x_29 () String)
(declare-fun literal_26 () String)
(declare-fun x_30 () String)
(declare-fun literal_25 () String)
(declare-fun x_31 () String)
(declare-fun x_32 () String)
(declare-fun literal_23 () String)
(declare-fun x_33 () String)
(declare-fun x_36 () String)
(declare-fun literal_35 () String)
(declare-fun x_37 () String)
(declare-fun literal_38 () String)
(declare-fun x_39 () String)
(declare-fun x_40 () String)
(declare-fun literal_41 () String)
(declare-fun x_42 () String)
(declare-fun x_44 () String)
(declare-fun literal_43 () String)
(declare-fun x_45 () String)
(declare-fun x_47 () String)
(declare-fun literal_46 () String)
(declare-fun x_48 () String)
(declare-fun literal_49 () String)
(declare-fun x_50 () String)
(declare-fun x_51 () String)
(declare-fun x_53 () String)
(declare-fun literal_52 () String)
(declare-fun x_54 () String)
(declare-fun literal_55 () String)
(declare-fun x_56 () String)
(assert (= literal_9 "\x53\x45\x4c\x45\x43\x54\x20\x74\x66\x2e\x2a\x2c\x20\x74\x74\x2e\x2a\x2c\x20\x74\x75\x2e\x75\x73\x65\x72\x5f\x69\x64\x2c\x75\x73\x65\x72\x5f\x6e\x61\x6d\x65\x2c\x20\x4d\x41\x58\x28\x74\x70\x2e\x70\x6f\x73\x74\x5f\x69\x64\x29\x20\x61\x73\x20\x6c\x61\x73\x74\x5f\x69\x64\x2c\x20\x43\x4f\x55\x4e\x54\x28\x74\x70\x2e\x70\x6f\x73\x74\x5f\x69\x64\x29\x20\x61\x73\x20\x63\x6f\x75\x6e\x74\x5f\x70\x6f\x73\x74\x73\x20\x46\x52\x4f\x4d\x20"))
(assert (= x_10 (str.++ literal_9 sigmaStar_3)))
(assert (= literal_11 "\x66\x6f\x72\x75\x6d\x73\x20\x74\x66\x0d\x0a\x09\x49\x4e\x4e\x45\x52\x20\x4a\x4f\x49\x4e\x20"))
(assert (= x_12 (str.++ x_10 literal_11)))
(assert (= x_13 (str.++ x_12 sigmaStar_5)))
(assert (= literal_14 "\x74\x68\x72\x65\x61\x64\x73\x20\x74\x74\x20\x55\x53\x49\x4e\x47\x28\x66\x6f\x72\x75\x6d\x5f\x69\x64\x29\x0d\x0a\x09\x49\x4e\x4e\x45\x52\x20\x4a\x4f\x49\x4e\x20"))
(assert (= x_15 (str.++ x_13 literal_14)))
(assert (= x_16 (str.++ x_15 sigmaStar_0)))
(assert (= literal_18 "\x70\x6f\x73\x74\x73\x20\x74\x70\x20\x55\x53\x49\x4e\x47\x28\x74\x68\x72\x65\x61\x64\x5f\x69\x64\x29\x0d\x0a\x09\x49\x4e\x4e\x45\x52\x20\x4a\x4f\x49\x4e\x20"))
(assert (= x_22 (str.++ x_16 literal_18)))
(assert (= literal_17 "\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27"))
(assert (= literal_20 "\x74\x62\x6c\x32"))
(assert (= literal_19 "\x74\x62\x6c\x31"))
(assert (or (= x_21 literal_20) (= x_21 literal_19)))
(assert (= x_24 (str.++ literal_17 x_21)))
(assert (= x_28 (str.++ x_22 sigmaStar_6)))
(assert (= literal_27 "\x75\x73\x65\x72\x73\x20\x74\x75\x20\x4f\x4e\x20\x74\x74\x2e\x74\x68\x72\x65\x61\x64\x5f\x6c\x61\x73\x74\x75\x73\x65\x72\x3d\x74\x75\x2e\x75\x73\x65\x72\x5f\x69\x64\x0d\x0a\x09\x57\x48\x45\x52\x45\x20"))
(assert (= x_29 (str.++ x_28 literal_27)))
(assert (= literal_26 "\x66\x6f\x72\x75\x6d\x5f\x61\x63\x63\x65\x73\x73"))
(assert (= x_30 (str.++ x_29 literal_26)))
(assert (= literal_25 "\x20\x47\x52\x4f\x55\x50\x20\x42\x59\x20\x74\x68\x72\x65\x61\x64\x5f\x69\x64\x20\x4f\x52\x44\x45\x52\x20\x42\x59\x20\x74\x68\x72\x65\x61\x64\x5f\x6c\x61\x73\x74\x70\x6f\x73\x74\x20\x44\x45\x53\x43\x20\x4c\x49\x4d\x49\x54\x20\x30\x2c"))
(assert (= x_31 (str.++ x_30 literal_25)))
(assert (= x_32 (str.++ x_31 sigmaStar_8)))
(assert (= literal_23 "\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27"))
(assert (or (= x_33 literal_20) (= x_33 literal_19)))
(assert (= x_36 (str.++ literal_23 x_33)))
(assert (= literal_35 "\x20\x73\x74\x79\x6c\x65\x3d\x77\x68\x69\x74\x65\x2d\x73\x70\x61\x63\x65\x3a\x6e\x6f\x77\x72\x61\x70\x27\x3e\x3c\x73\x70\x61\x6e\x20\x63\x6c\x61\x73\x73\x3d\x27\x73\x6d\x61\x6c\x6c\x27\x3e"))
(assert (= x_37 (str.++ x_24 literal_35)))
(assert (= literal_38 "\x20\x73\x74\x79\x6c\x65\x3d\x77\x68\x69\x74\x65\x2d\x73\x70\x61\x63\x65\x3a\x6e\x6f\x77\x72\x61\x70\x27\x3e\x3c\x73\x70\x61\x6e\x20\x63\x6c\x61\x73\x73\x3d\x27\x73\x6d\x61\x6c\x6c\x27\x3e\x3c\x61\x20\x68\x72\x65\x66\x3d\x27"))
(assert (= x_39 (str.++ x_36 literal_38)))
(assert (= x_40 (str.++ x_37 x_39)))
(assert (= literal_41 "\x70\x72\x6f\x66\x69\x6c\x65\x2e\x70\x68\x70\x3f\x6c\x6f\x6f\x6b\x75\x70\x3d"))
(assert (= x_42 (str.++ x_40 literal_41)))
(assert (= x_44 (str.++ x_42 x_32)))
(assert (= literal_43 "\x3c\x2f\x61\x3e\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27"))
(assert (or (= x_45 literal_20) (= x_45 literal_19)))
(assert (= x_47 (str.++ literal_43 x_45)))
(assert (= literal_46 "\x27\x3e"))
(assert (= x_48 (str.++ x_44 literal_46)))
(assert (= literal_49 "\x20\x73\x74\x79\x6c\x65\x3d\x77\x68\x69\x74\x65\x2d\x73\x70\x61\x63\x65\x3a\x6e\x6f\x77\x72\x61\x70\x27\x3e\x3c\x73\x70\x61\x6e\x20\x63\x6c\x61\x73\x73\x3d\x27\x73\x6d\x61\x6c\x6c\x27\x3e"))
(assert (= x_50 (str.++ x_47 literal_49)))
(assert (= x_51 (str.++ x_48 x_32)))
(assert (= x_53 (str.++ x_51 x_50)))
(assert (= literal_52 "\x66\x6f\x72\x75\x6d\x64\x61\x74\x65"))
(assert (= x_54 (str.++ x_53 literal_52)))
(assert (= literal_55 "\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x5c\x6e"))
(assert (= x_56 (str.++ x_54 literal_55)))
(assert (str.in_re x_56 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
