(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_7 () String)
(declare-fun literal_6 () String)
(declare-fun x_9 () String)
(declare-fun literal_10 () String)
(declare-fun x_12 () String)
(declare-fun literal_11 () String)
(declare-fun x_13 () String)
(declare-fun x_15 () String)
(declare-fun x_14 () String)
(declare-fun literal_8 () String)
(declare-fun x_16 () String)
(declare-fun literal_17 () String)
(declare-fun x_19 () String)
(declare-fun literal_18 () String)
(declare-fun x_20 () String)
(declare-fun x_36 () String)
(declare-fun epsilon () String)
(declare-fun literal_21 () String)
(declare-fun literal_22 () String)
(declare-fun literal_23 () String)
(assert (= literal_5 "\x49\x74\x65\x6d\x20\x77\x61\x73\x20\x61\x64\x64\x65\x64\x2c\x20\x61\x6e\x64\x20\x61\x20\x6e\x65\x77\x20\x63\x61\x74\x65\x67\x6f\x72\x79\x20\x77\x61\x73\x20\x63\x72\x65\x61\x74\x65\x64\x2e\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x22\x69\x6e\x64\x65\x78\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x63\x61\x74\x65\x67\x6f\x72\x79\x65\x64\x69\x74\x26\x61\x6d\x70\x3b\x62\x6c\x6f\x67\x69\x64\x3d"))
(assert (= x_7 (str.++ literal_5 sigmaStar_2)))
(assert (= literal_6 "\x49\x74\x65\x6d\x20\x77\x61\x73\x20\x61\x64\x64\x65\x64\x2c\x20\x61\x6e\x64\x20\x61\x20\x6e\x65\x77\x20\x63\x61\x74\x65\x67\x6f\x72\x79\x20\x77\x61\x73\x20\x63\x72\x65\x61\x74\x65\x64\x2e\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x22\x69\x6e\x64\x65\x78\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x63\x61\x74\x65\x67\x6f\x72\x79\x65\x64\x69\x74\x26\x61\x6d\x70\x3b\x62\x6c\x6f\x67\x69\x64\x3d"))
(assert (= x_9 (str.++ literal_6 sigmaStar_1)))
(assert (= literal_10 "\x26\x61\x6d\x70\x3b\x63\x61\x74\x69\x64\x3d"))
(assert (= x_12 (str.++ x_7 literal_10)))
(assert (= literal_11 "\x26\x61\x6d\x70\x3b\x63\x61\x74\x69\x64\x3d"))
(assert (= x_13 (str.++ x_9 literal_11)))
(assert (= x_15 (str.++ x_12 sigmaStar_2)))
(assert (= literal_8 "\x63\x61\x74\x69\x64"))
(assert (or (= x_14 literal_8) (= x_14 sigmaStar_3)))
(assert (= x_16 (str.++ x_13 x_14)))
(assert (= literal_17 "\x22\x20\x6f\x6e\x63\x6c\x69\x63\x6b\x3d\x22\x69\x66\x20\x28\x65\x76\x65\x6e\x74\x20\x26\x61\x6d\x70\x3b\x26\x61\x6d\x70\x3b\x20\x65\x76\x65\x6e\x74\x2e\x70\x72\x65\x76\x65\x6e\x74\x44\x65\x66\x61\x75\x6c\x74\x29\x20\x65\x76\x65\x6e\x74\x2e\x70\x72\x65\x76\x65\x6e\x74\x44\x65\x66\x61\x75\x6c\x74\x28\x29\x3b\x20\x77\x69\x6e\x64\x6f\x77\x2e\x6f\x70\x65\x6e\x28\x74\x68\x69\x73\x2e\x68\x72\x65\x66\x29\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x66\x61\x6c\x73\x65\x3b\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x4f\x70\x65\x6e\x73\x20\x69\x6e\x20\x6e\x65\x77\x20\x77\x69\x6e\x64\x6f\x77\x22\x3e\x43\x6c\x69\x63\x6b\x20\x68\x65\x72\x65\x20\x74\x6f\x20\x65\x64\x69\x74\x20\x74\x68\x65\x20\x6e\x61\x6d\x65\x20\x61\x6e\x64\x20\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x20\x6f\x66\x20\x74\x68\x65\x20\x63\x61\x74\x65\x67\x6f\x72\x79\x2e\x3c\x2f\x61\x3e"))
(assert (= x_19 (str.++ x_15 literal_17)))
(assert (= literal_18 "\x22\x20\x6f\x6e\x63\x6c\x69\x63\x6b\x3d\x22\x69\x66\x20\x28\x65\x76\x65\x6e\x74\x20\x26\x61\x6d\x70\x3b\x26\x61\x6d\x70\x3b\x20\x65\x76\x65\x6e\x74\x2e\x70\x72\x65\x76\x65\x6e\x74\x44\x65\x66\x61\x75\x6c\x74\x29\x20\x65\x76\x65\x6e\x74\x2e\x70\x72\x65\x76\x65\x6e\x74\x44\x65\x66\x61\x75\x6c\x74\x28\x29\x3b\x20\x77\x69\x6e\x64\x6f\x77\x2e\x6f\x70\x65\x6e\x28\x74\x68\x69\x73\x2e\x68\x72\x65\x66\x29\x3b\x20\x72\x65\x74\x75\x72\x6e\x20\x66\x61\x6c\x73\x65\x3b\x22\x20\x74\x69\x74\x6c\x65\x3d\x22\x4f\x70\x65\x6e\x73\x20\x69\x6e\x20\x6e\x65\x77\x20\x77\x69\x6e\x64\x6f\x77\x22\x3e\x43\x6c\x69\x63\x6b\x20\x68\x65\x72\x65\x20\x74\x6f\x20\x65\x64\x69\x74\x20\x74\x68\x65\x20\x6e\x61\x6d\x65\x20\x61\x6e\x64\x20\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x20\x6f\x66\x20\x74\x68\x65\x20\x63\x61\x74\x65\x67\x6f\x72\x79\x2e\x3c\x2f\x61\x3e"))
(assert (= x_20 (str.++ x_16 literal_18)))
(assert (= epsilon ""))
(assert (= literal_21 "\x43\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x63\x72\x65\x61\x74\x65\x20\x6e\x65\x77\x20\x63\x61\x74\x65\x67\x6f\x72\x79"))
(assert (= literal_22 "\x53\x6f\x6d\x65\x74\x68\x69\x6e\x67\x20\x77\x65\x6e\x74\x20\x77\x72\x6f\x6e\x67"))
(assert (= literal_23 "\x53\x6f\x6d\x65\x74\x68\x69\x6e\x67\x20\x77\x65\x6e\x74\x20\x77\x72\x6f\x6e\x67"))
(assert (or (= x_36 epsilon) (= x_36 x_20) (= x_36 literal_21) (= x_36 x_19) (= x_36 sigmaStar_2) (= x_36 literal_22) (= x_36 literal_23)))
(assert (str.in_re x_36 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
