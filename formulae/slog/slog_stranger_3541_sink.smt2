(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_18 () String)
(declare-fun literal_12 () String)
(declare-fun x_19 () String)
(declare-fun literal_13 () String)
(declare-fun x_20 () String)
(declare-fun literal_14 () String)
(declare-fun x_21 () String)
(declare-fun literal_15 () String)
(declare-fun x_22 () String)
(declare-fun literal_16 () String)
(declare-fun x_23 () String)
(declare-fun literal_17 () String)
(declare-fun x_24 () String)
(declare-fun literal_25 () String)
(declare-fun x_31 () String)
(declare-fun literal_26 () String)
(declare-fun x_32 () String)
(declare-fun x_33 () String)
(declare-fun literal_27 () String)
(declare-fun x_34 () String)
(declare-fun literal_28 () String)
(declare-fun x_35 () String)
(declare-fun literal_29 () String)
(declare-fun x_36 () String)
(declare-fun literal_30 () String)
(declare-fun x_37 () String)
(declare-fun literal_45 () String)
(declare-fun x_44 () String)
(declare-fun x_46 () String)
(declare-fun literal_47 () String)
(declare-fun x_48 () String)
(assert (= literal_9 "\x3c\x62\x3e"))
(assert (= x_10 (str.++ literal_9 sigmaStar_2)))
(assert (= literal_11 "\x3c\x62\x3e"))
(assert (= x_18 (str.++ literal_11 sigmaStar_6)))
(assert (= literal_12 "\x3c\x62\x3e"))
(assert (= x_19 (str.++ literal_12 sigmaStar_5)))
(assert (= literal_13 "\x3c\x2f\x62\x3e\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_20 (str.++ x_10 literal_13)))
(assert (= literal_14 "\x3c\x62\x3e"))
(assert (= x_21 (str.++ literal_14 sigmaStar_4)))
(assert (= literal_15 "\x3c\x62\x3e"))
(assert (= x_22 (str.++ literal_15 sigmaStar_1)))
(assert (= literal_16 "\x3c\x62\x3e"))
(assert (= x_23 (str.++ literal_16 sigmaStar_7)))
(assert (= literal_17 "\x3c\x62\x3e"))
(assert (= x_24 (str.++ literal_17 sigmaStar_0)))
(assert (= literal_25 "\x3c\x2f\x62\x3e"))
(assert (= x_31 (str.++ x_18 literal_25)))
(assert (= literal_26 "\x3c\x2f\x62\x3e"))
(assert (= x_32 (str.++ x_19 literal_26)))
(assert (= x_33 (str.++ x_20 sigmaStar_8)))
(assert (= literal_27 "\x3c\x2f\x62\x3e"))
(assert (= x_34 (str.++ x_21 literal_27)))
(assert (= literal_28 "\x3c\x2f\x62\x3e"))
(assert (= x_35 (str.++ x_22 literal_28)))
(assert (= literal_29 "\x3c\x2f\x62\x3e"))
(assert (= x_36 (str.++ x_23 literal_29)))
(assert (= literal_30 "\x3c\x2f\x62\x3e"))
(assert (= x_37 (str.++ x_24 literal_30)))
(assert (= literal_45 "\x3c\x64\x69\x76\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x3e"))
(assert (or (= x_44 x_33) (= x_44 x_32) (= x_44 x_31) (= x_44 sigmaStar_3) (= x_44 x_37) (= x_44 x_36) (= x_44 x_35) (= x_44 x_34)))
(assert (= x_46 (str.++ literal_45 x_44)))
(assert (= literal_47 "\x3c\x2f\x64\x69\x76\x3e\x5c\x6e"))
(assert (= x_48 (str.++ x_46 literal_47)))
(assert (str.in_re x_48 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
