(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_6 () String)
(declare-fun x_10 () String)
(declare-fun epsilon () String)
(declare-fun literal_9 () String)
(declare-fun x_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_15 () String)
(declare-fun literal_14 () String)
(declare-fun x_18 () String)
(declare-fun x_19 () String)
(declare-fun literal_17 () String)
(declare-fun x_20 () String)
(declare-fun x_22 () String)
(declare-fun literal_21 () String)
(declare-fun x_24 () String)
(declare-fun literal_26 () String)
(declare-fun x_27 () String)
(declare-fun literal_25 () String)
(declare-fun x_30 () String)
(declare-fun literal_31 () String)
(declare-fun x_32 () String)
(assert (= literal_6 "\x57\x48\x45\x52\x45\x20\x28\x65\x2e\x75\x73\x65\x72\x69\x64\x3d\x27"))
(assert (= epsilon ""))
(assert (= literal_9 "\x75\x73\x65\x72"))
(assert (or (= x_10 epsilon) (= x_10 literal_9)))
(assert (= x_12 (str.++ literal_6 x_10)))
(assert (= literal_13 "\x27\x29\x20"))
(assert (= x_15 (str.++ x_12 literal_13)))
(assert (= literal_14 "\x2f\x65\x6e\x72\x6f\x6c\x2f\x61\x75\x74\x68\x6f\x72\x69\x7a\x65\x2f\x69\x6e\x64\x65\x78\x2e\x70\x68\x70\x3f\x75\x73\x65\x72\x3d"))
(assert (or (= x_18 epsilon) (= x_18 literal_9)))
(assert (= x_19 (str.++ literal_14 x_18)))
(assert (= literal_17 "\x53\x45\x4c\x45\x43\x54\x20\x63\x2e\x69\x64\x2c\x20\x63\x2e\x66\x75\x6c\x6c\x6e\x61\x6d\x65\x20\x46\x52\x4f\x4d\x20\x63\x6f\x75\x72\x73\x65\x20\x63\x20\x49\x4e\x4e\x45\x52\x20\x4a\x4f\x49\x4e\x20\x65\x6e\x72\x6f\x6c\x5f\x61\x75\x74\x68\x6f\x72\x69\x7a\x65\x20\x65\x20\x4f\x4e\x20\x63\x2e\x69\x64\x20\x3d\x20\x65\x2e\x63\x6f\x75\x72\x73\x65\x69\x64\x20"))
(assert (= x_20 (str.++ literal_17 x_15)))
(assert (or (= x_22 x_20) (= x_22 literal_17)))
(assert (= literal_21 "\x4f\x52\x44\x45\x52\x20\x42\x59\x20\x63\x2e\x73\x6f\x72\x74\x6f\x72\x64\x65\x72\x2c\x20\x63\x2e\x66\x75\x6c\x6c\x6e\x61\x6d\x65"))
(assert (= x_24 (str.++ x_22 literal_21)))
(assert (= literal_26 "\x26\x61\x6d\x70\x3b\x73\x74\x61\x74\x75\x73\x3d"))
(assert (= x_27 (str.++ x_19 literal_26)))
(assert (= literal_25 "\x73\x74\x61\x74\x75\x73"))
(assert (= x_30 (str.++ x_27 literal_25)))
(assert (= literal_31 "\x26\x61\x6d\x70\x3b\x63\x6f\x75\x72\x73\x65\x3d"))
(assert (= x_32 (str.++ x_30 literal_31)))
(assert (str.in_re x_32 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
