(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun literal_16 () String)
(declare-fun x_15 () String)
(declare-fun literal_8 () String)
(declare-fun literal_10 () String)
(declare-fun literal_9 () String)
(declare-fun literal_2 () String)
(declare-fun literal_7 () String)
(declare-fun x_17 () String)
(declare-fun literal_19 () String)
(declare-fun x_18 () String)
(declare-fun epsilon () String)
(declare-fun literal_4 () String)
(declare-fun x_20 () String)
(declare-fun literal_3 () String)
(declare-fun x_21 () String)
(declare-fun x_22 () String)
(assert (= literal_16 "\x26\x61\x6d\x70\x3b\x6d\x6f\x64\x65\x3d"))
(assert (= literal_8 "\x72\x65\x76\x69\x65\x77"))
(assert (= literal_10 "\x6e\x6f\x72\x6d\x61\x6c"))
(assert (= literal_9 "\x6e\x6f\x72\x6d\x61\x6c"))
(assert (= literal_2 "\x6d\x6f\x64\x65"))
(assert (= literal_7 "\x6e\x6f\x72\x6d\x61\x6c"))
(assert (or (= x_15 literal_8) (= x_15 literal_10) (= x_15 literal_9) (= x_15 literal_2) (= x_15 literal_7)))
(assert (= x_17 (str.++ literal_16 x_15)))
(assert (= literal_19 "\x26\x61\x6d\x70\x3b\x61\x74\x74\x65\x6d\x70\x74\x3d"))
(assert (= epsilon ""))
(assert (= literal_4 "\x31"))
(assert (or (= x_18 epsilon) (= x_18 literal_4)))
(assert (= x_20 (str.++ literal_19 x_18)))
(assert (= literal_3 "\x26\x61\x6d\x70\x3b\x73\x63\x6f\x69\x64\x3d"))
(assert (= x_21 (str.++ literal_3 x_17)))
(assert (= x_22 (str.++ x_21 x_20)))
(assert (str.in_re x_22 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
