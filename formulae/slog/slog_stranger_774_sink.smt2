(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun sigmaStar_10 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun sigmaStar_12 () String)
(declare-fun sigmaStar_13 () String)
(declare-fun sigmaStar_14 () String)
(declare-fun sigmaStar_15 () String)
(declare-fun sigmaStar_16 () String)
(declare-fun sigmaStar_17 () String)
(declare-fun sigmaStar_18 () String)
(declare-fun sigmaStar_19 () String)
(declare-fun sigmaStar_20 () String)
(declare-fun sigmaStar_21 () String)
(declare-fun sigmaStar_22 () String)
(declare-fun sigmaStar_23 () String)
(declare-fun sigmaStar_24 () String)
(declare-fun sigmaStar_26 () String)
(declare-fun sigmaStar_28 () String)
(declare-fun sigmaStar_36 () String)
(declare-fun sigmaStar_39 () String)
(declare-fun literal_51 () String)
(declare-fun x_34 () String)
(declare-fun epsilon () String)
(declare-fun x_53 () String)
(declare-fun literal_56 () String)
(declare-fun x_59 () String)
(declare-fun literal_54 () String)
(declare-fun x_60 () String)
(declare-fun x_62 () String)
(declare-fun literal_55 () String)
(declare-fun literal_57 () String)
(declare-fun literal_58 () String)
(declare-fun x_64 () String)
(declare-fun literal_63 () String)
(declare-fun x_66 () String)
(declare-fun literal_67 () String)
(declare-fun x_69 () String)
(declare-fun literal_65 () String)
(declare-fun x_68 () String)
(declare-fun x_70 () String)
(declare-fun x_71 () String)
(declare-fun x_73 () String)
(declare-fun x_76 () String)
(declare-fun literal_74 () String)
(declare-fun x_77 () String)
(declare-fun literal_75 () String)
(declare-fun x_78 () String)
(declare-fun literal_81 () String)
(declare-fun x_83 () String)
(declare-fun x_82 () String)
(declare-fun x_84 () String)
(declare-fun x_85 () String)
(declare-fun x_86 () String)
(declare-fun x_89 () String)
(declare-fun literal_87 () String)
(declare-fun x_90 () String)
(declare-fun literal_88 () String)
(declare-fun x_91 () String)
(declare-fun literal_92 () String)
(declare-fun x_94 () String)
(declare-fun x_93 () String)
(declare-fun x_95 () String)
(declare-fun x_96 () String)
(declare-fun x_97 () String)
(declare-fun x_100 () String)
(declare-fun literal_98 () String)
(declare-fun x_101 () String)
(declare-fun literal_99 () String)
(declare-fun x_102 () String)
(declare-fun literal_103 () String)
(declare-fun x_105 () String)
(declare-fun x_107 () String)
(declare-fun literal_104 () String)
(declare-fun x_108 () String)
(declare-fun literal_109 () String)
(declare-fun x_110 () String)
(assert (= literal_51 "\x0d\x0a\x0d\x0a\x3c\x68\x74\x6d\x6c\x3e\x3c\x68\x65\x61\x64\x3e\x3c\x74\x69\x74\x6c\x65\x3e\x50\x6c\x6f\x74\x74\x69\x6e\x67\x20"))
(assert (= epsilon ""))
(assert (or (= x_34 epsilon) (= x_34 sigmaStar_19)))
(assert (= x_53 (str.++ literal_51 x_34)))
(assert (= literal_56 "\x3c\x2f\x74\x69\x74\x6c\x65\x3e\x0d\x0a"))
(assert (= x_59 (str.++ x_53 literal_56)))
(assert (= literal_54 "\x3c\x69\x6d\x67\x20\x73\x72\x63\x3d\x5c\x22\x70\x6c\x6f\x74\x69\x6d\x61\x67\x65\x2e\x70\x68\x70\x3f\x6c\x61\x74\x3d"))
(assert (= x_60 (str.++ literal_54 x_34)))
(assert (= literal_55 "\x3c\x73\x74\x79\x6c\x65\x3e\x0d\x0a\x23\x64\x6f\x74\x44\x69\x76\x20\x7b\x20\x70\x61\x64\x64\x69\x6e\x67\x2d\x6c\x65\x66\x74\x3a\x3b\x20\x70\x61\x64\x64\x69\x6e\x67\x2d\x74\x6f\x70\x3a\x3b\x20\x7d\x0d\x0a\x3c\x2f\x73\x74\x79\x6c\x65\x3e"))
(assert (= literal_57 ""))
(assert (= literal_58 ""))
(assert (or (= x_62 literal_55) (= x_62 literal_57) (= x_62 literal_58)))
(assert (= x_64 (str.++ x_59 x_62)))
(assert (= literal_63 "\x26\x61\x6d\x70\x3b\x6c\x6f\x6e\x3d"))
(assert (= x_66 (str.++ x_60 literal_63)))
(assert (= literal_67 "\x0d\x0a\x0d\x0a\x3c\x21\x2d\x2d\x20\x79\x6f\x75\x72\x20\x68\x65\x61\x64\x20\x74\x61\x67\x73\x20\x68\x65\x72\x65\x20\x2d\x2d\x3e\x0d\x0a\x3c\x6c\x69\x6e\x6b\x20\x72\x65\x6c\x3d\x22\x53\x74\x79\x6c\x65\x73\x68\x65\x65\x74\x22\x20\x68\x72\x65\x66\x3d\x22\x69\x70\x2d\x61\x74\x6c\x61\x73\x2e\x63\x73\x73\x22\x3e\x0d\x0a\x3c\x2f\x68\x65\x61\x64\x3e\x3c\x62\x6f\x64\x79\x20\x62\x67\x63\x6f\x6c\x6f\x72\x3d\x22\x23\x46\x46\x46\x46\x46\x46\x22\x3e\x0d\x0a\x0d\x0a\x0d\x0a\x3c\x61\x20\x6e\x61\x6d\x65\x3d\x22\x6d\x61\x70\x22\x3e\x3c\x2f\x61\x3e\x0d\x0a\x0d\x0a\x3c\x74\x61\x62\x6c\x65\x20\x76\x61\x6c\x69\x67\x6e\x3d\x22\x74\x6f\x70\x22\x20\x63\x65\x6c\x6c\x70\x61\x64\x64\x69\x6e\x67\x3d\x30\x20\x63\x65\x6c\x6c\x73\x70\x61\x63\x69\x6e\x67\x3d\x30\x20\x62\x6f\x72\x64\x65\x72\x3d\x30\x20\x62\x61\x63\x6b\x67\x72\x6f\x75\x6e\x64\x3d\x22"))
(assert (= x_69 (str.++ x_64 literal_67)))
(assert (= literal_65 "\x3c\x64\x69\x76\x20\x69\x64\x3d\x5c\x22\x64\x6f\x74\x44\x69\x76\x5c\x22\x3e\x3c\x69\x6d\x67\x20\x77\x69\x64\x74\x68\x3d\x5c\x22"))
(assert (or (= x_68 sigmaStar_28) (= x_68 sigmaStar_26)))
(assert (= x_70 (str.++ literal_65 x_68)))
(assert (= x_71 (str.++ x_66 x_34)))
(assert (or (= x_73 sigmaStar_39) (= x_73 sigmaStar_15) (= x_73 sigmaStar_36)))
(assert (= x_76 (str.++ x_69 x_73)))
(assert (= literal_74 "\x5c\x22\x20\x68\x65\x69\x67\x68\x74\x3d\x5c\x22"))
(assert (= x_77 (str.++ x_70 literal_74)))
(assert (= literal_75 "\x5c\x22\x20\x77\x69\x64\x74\x68\x3d\x5c\x22"))
(assert (= x_78 (str.++ x_71 literal_75)))
(assert (= literal_81 "\x22\x20\x77\x69\x64\x74\x68\x3d\x22"))
(assert (= x_83 (str.++ x_76 literal_81)))
(assert (or (= x_82 sigmaStar_28) (= x_82 sigmaStar_26)))
(assert (= x_84 (str.++ x_77 x_82)))
(assert (= x_85 (str.++ x_78 sigmaStar_23)))
(assert (or (= x_86 sigmaStar_24) (= x_86 sigmaStar_23)))
(assert (= x_89 (str.++ x_83 x_86)))
(assert (= literal_87 "\x5c\x22\x20\x73\x72\x63\x3d\x5c\x22"))
(assert (= x_90 (str.++ x_84 literal_87)))
(assert (= literal_88 "\x5c\x22\x20\x68\x65\x69\x67\x68\x74\x3d\x5c\x22"))
(assert (= x_91 (str.++ x_85 literal_88)))
(assert (= literal_92 "\x22\x20\x68\x65\x69\x67\x68\x74\x3d\x22"))
(assert (= x_94 (str.++ x_89 literal_92)))
(assert (or (= x_93 sigmaStar_28) (= x_93 sigmaStar_26)))
(assert (= x_95 (str.++ x_90 x_93)))
(assert (= x_96 (str.++ x_91 sigmaStar_23)))
(assert (or (= x_97 sigmaStar_24) (= x_97 sigmaStar_23)))
(assert (= x_100 (str.++ x_94 x_97)))
(assert (= literal_98 "\x5c\x22\x3e"))
(assert (= x_101 (str.++ x_95 literal_98)))
(assert (= literal_99 "\x5c\x22\x20\x61\x6c\x74\x3d\x5c\x22\x5c\x22\x20\x2f\x3e"))
(assert (= x_102 (str.++ x_96 literal_99)))
(assert (= literal_103 "\x22\x3e\x3c\x74\x72\x3e\x3c\x74\x64\x20\x76\x61\x6c\x69\x67\x6e\x3d\x22\x74\x6f\x70\x22\x3e"))
(assert (= x_105 (str.++ x_100 literal_103)))
(assert (= literal_104 "\x26\x6e\x62\x73\x70\x3b"))
(assert (or (= x_107 x_102) (= x_107 literal_104) (= x_107 x_101)))
(assert (= x_108 (str.++ x_105 x_107)))
(assert (= literal_109 "\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e\x3c\x2f\x74\x61\x62\x6c\x65\x3e\x0d\x0a\x0d\x0a\x0d\x0a\x3c\x62\x72\x20\x2f\x3e\x0d\x0a"))
(assert (= x_110 (str.++ x_108 literal_109)))
(assert (str.in_re x_110 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
