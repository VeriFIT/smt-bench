(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun literal_17 () String)
(declare-fun x_18 () String)
(declare-fun literal_16 () String)
(declare-fun literal_13 () String)
(declare-fun x_21 () String)
(declare-fun literal_22 () String)
(declare-fun x_23 () String)
(declare-fun literal_20 () String)
(declare-fun x_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_28 () String)
(declare-fun literal_25 () String)
(declare-fun x_31 () String)
(declare-fun literal_32 () String)
(declare-fun x_34 () String)
(declare-fun x_35 () String)
(declare-fun literal_30 () String)
(declare-fun literal_33 () String)
(declare-fun x_38 () String)
(declare-fun literal_39 () String)
(declare-fun x_40 () String)
(declare-fun literal_37 () String)
(declare-fun x_41 () String)
(declare-fun literal_42 () String)
(declare-fun x_43 () String)
(declare-fun literal_44 () String)
(declare-fun x_45 () String)
(declare-fun literal_36 () String)
(declare-fun x_46 () String)
(declare-fun literal_49 () String)
(declare-fun x_50 () String)
(declare-fun literal_48 () String)
(declare-fun x_51 () String)
(declare-fun literal_52 () String)
(declare-fun x_53 () String)
(assert (= literal_17 "\x2f\x63\x6f\x75\x72\x73\x65\x2f\x72\x65\x70\x6f\x72\x74\x2f\x70\x61\x72\x74\x69\x63\x69\x70\x61\x74\x69\x6f\x6e\x2f\x69\x6e\x64\x65\x78\x2e\x70\x68\x70\x3f\x69\x64\x3d\x26\x61\x6d\x70\x3b\x74\x65\x61\x63\x68\x65\x72\x73\x3d\x74\x65\x61\x63\x68\x65\x72\x73\x26\x61\x6d\x70\x3b\x69\x6e\x73\x74\x61\x6e\x63\x65\x69\x64\x3d"))
(assert (= literal_16 "\x30"))
(assert (= literal_13 "\x69\x6e\x73\x74\x61\x6e\x63\x65\x69\x64"))
(assert (or (= x_18 literal_16) (= x_18 literal_13)))
(assert (= x_21 (str.++ literal_17 x_18)))
(assert (= literal_22 "\x26\x61\x6d\x70\x3b\x74\x69\x6d\x65\x66\x72\x6f\x6d\x3d"))
(assert (= x_23 (str.++ x_21 literal_22)))
(assert (= literal_20 "\x74\x69\x6d\x65\x66\x72\x6f\x6d"))
(assert (= x_26 (str.++ x_23 literal_20)))
(assert (= literal_27 "\x26\x61\x6d\x70\x3b\x6d\x6f\x64\x75\x6c\x65\x69\x64\x3d"))
(assert (= x_28 (str.++ x_26 literal_27)))
(assert (= literal_25 "\x6d\x6f\x64\x75\x6c\x65\x69\x64"))
(assert (= x_31 (str.++ x_28 literal_25)))
(assert (= literal_32 "\x26\x61\x63\x74\x69\x6f\x6e\x3d"))
(assert (= x_34 (str.++ x_31 literal_32)))
(assert (= literal_30 "\x61\x63\x74\x69\x6f\x6e"))
(assert (= literal_33 ""))
(assert (or (= x_35 literal_30) (= x_35 literal_33)))
(assert (= x_38 (str.++ x_34 x_35)))
(assert (= literal_39 "\x26\x61\x6d\x70\x3b\x70\x65\x72\x70\x61\x67\x65\x3d"))
(assert (= x_40 (str.++ x_38 literal_39)))
(assert (= literal_37 "\x70\x65\x72\x70\x61\x67\x65"))
(assert (= x_41 (str.++ x_40 literal_37)))
(assert (= literal_42 "\x3c\x64\x69\x76\x20\x69\x64\x3d\x22\x73\x68\x6f\x77\x61\x6c\x6c\x22\x3e\x3c\x61\x20\x68\x72\x65\x66\x3d\x22"))
(assert (= x_43 (str.++ literal_42 x_41)))
(assert (= literal_44 "\x26\x61\x6d\x70\x3b\x70\x65\x72\x70\x61\x67\x65\x3d"))
(assert (= x_45 (str.++ x_43 literal_44)))
(assert (= literal_36 "\x32\x30"))
(assert (= x_46 (str.++ x_45 literal_36)))
(assert (= literal_49 "\x22\x3e"))
(assert (= x_50 (str.++ x_46 literal_49)))
(assert (= literal_48 "\x73\x68\x6f\x77\x70\x65\x72\x70\x61\x67\x65"))
(assert (= x_51 (str.++ x_50 literal_48)))
(assert (= literal_52 "\x3c\x2f\x61\x3e\x3c\x2f\x64\x69\x76\x3e"))
(assert (= x_53 (str.++ x_51 literal_52)))
(assert (str.in_re x_53 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
