(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun epsilon () String)
(declare-fun sigmaStar_16 () String)
(declare-fun sigmaStar_18 () String)
(declare-fun x_9 () String)
(declare-fun sigmaStar_23 () String)
(declare-fun sigmaStar_31 () String)
(declare-fun x_19 () String)
(declare-fun literal_33 () String)
(declare-fun x_38 () String)
(declare-fun literal_37 () String)
(declare-fun x_32 () String)
(declare-fun x_44 () String)
(declare-fun literal_36 () String)
(declare-fun x_42 () String)
(declare-fun x_48 () String)
(declare-fun literal_40 () String)
(declare-fun x_46 () String)
(declare-fun x_51 () String)
(declare-fun literal_41 () String)
(declare-fun x_47 () String)
(declare-fun x_52 () String)
(declare-fun literal_45 () String)
(declare-fun x_50 () String)
(declare-fun x_54 () String)
(declare-fun literal_53 () String)
(declare-fun x_57 () String)
(declare-fun sigmaStar_60 () String)
(declare-fun literal_55 () String)
(declare-fun x_62 () String)
(declare-fun literal_56 () String)
(declare-fun x_63 () String)
(declare-fun sigmaStar_64 () String)
(declare-fun literal_49 () String)
(declare-fun literal_61 () String)
(declare-fun x_66 () String)
(declare-fun x_67 () String)
(declare-fun x_68 () String)
(declare-fun x_69 () String)
(declare-fun x_70 () String)
(declare-fun x_65 () String)
(declare-fun x_72 () String)
(declare-fun literal_73 () String)
(declare-fun x_77 () String)
(declare-fun literal_71 () String)
(declare-fun x_78 () String)
(declare-fun literal_79 () String)
(declare-fun x_81 () String)
(declare-fun literal_80 () String)
(declare-fun x_82 () String)
(declare-fun literal_83 () String)
(declare-fun x_84 () String)
(assert (= epsilon ""))
(assert (= x_9 (str.replace epsilon "\x26\x6c\x74\x3b" "\x3c")))
(assert (= x_19 (str.replace x_9 "\x26\x67\x74\x3b" "\x3e")))
(assert (= x_32 (str.replace x_19 "\x21\x5c\x72\x5c\x6e\x3f\x21" "\x20")))
(assert (= literal_33 "\x2f\x2f"))
(assert (= x_38 (str.++ literal_33 sigmaStar_23)))
(assert (= literal_37 "\x5c\x4c\x61\x72\x67\x65\x20"))
(assert (= x_44 (str.++ literal_37 x_32)))
(assert (= literal_36 "\x20\x2b\x2b\x20\x2d\x65\x20\x20\x5c\x22"))
(assert (or (= x_42 x_38) (= x_42 sigmaStar_0)))
(assert (= x_48 (str.++ literal_36 x_42)))
(assert (= literal_40 "\x5c\x22\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x2e\x64\x61\x72\x77\x69\x6e\x5c\x22\x20\x2d\x65\x20\x5c\x22"))
(assert (or (= x_46 x_38) (= x_46 sigmaStar_4)))
(assert (= x_51 (str.++ literal_40 x_46)))
(assert (= literal_41 "\x5c\x22\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x2e\x6c\x69\x6e\x75\x78\x5c\x22\x20\x2d\x65\x20\x5c\x22"))
(assert (or (= x_47 sigmaStar_1) (= x_47 x_38)))
(assert (= x_52 (str.++ literal_41 x_47)))
(assert (= literal_45 "\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x20\x2d\x65\x20"))
(assert (or (= x_50 sigmaStar_2) (= x_50 x_38)))
(assert (= x_54 (str.++ literal_45 x_50)))
(assert (= literal_53 "\x5c\x22\x20\x2d\x2d\x20"))
(assert (= x_57 (str.++ x_48 literal_53)))
(assert (= literal_55 "\x5c\x22\x20\x2d\x2d\x20"))
(assert (= x_62 (str.++ x_51 literal_55)))
(assert (= literal_56 "\x5c\x22\x20\x2d\x2d\x20"))
(assert (= x_63 (str.++ x_52 literal_56)))
(assert (= literal_49 "\x2f\x2f\x6d\x69\x6d\x65\x74\x65\x78\x2e\x65\x78\x65"))
(assert (= x_65 (str.replace literal_49 "\x20" "\x5e\x20")))
(assert (= literal_61 "\x20\x2d\x2d\x20"))
(assert (= x_66 (str.++ x_54 literal_61)))
(assert (= x_67 (str.++ x_57 sigmaStar_60)))
(assert (= x_68 (str.++ x_62 sigmaStar_60)))
(assert (= x_69 (str.++ x_63 sigmaStar_60)))
(assert (= x_70 (str.++ x_66 sigmaStar_60)))
(assert (= x_72 (str.++ x_65 x_67)))
(assert (= literal_73 "\x54\x68\x65\x20\x73\x68\x65\x6c\x6c\x20\x63\x6f\x6d\x6d\x61\x6e\x64\x3c\x62\x72\x20\x2f\x3e"))
(assert (= literal_71 ""))
(assert (or (= x_77 x_72) (= x_77 literal_71) (= x_77 x_70) (= x_77 x_69) (= x_77 x_68)))
(assert (= x_78 (str.++ literal_73 x_77)))
(assert (= literal_79 "\x3c\x62\x72\x20\x2f\x3e\x72\x65\x74\x75\x72\x6e\x65\x64\x20\x73\x74\x61\x74\x75\x73\x20\x3d\x20"))
(assert (= x_81 (str.++ x_78 literal_79)))
(assert (= literal_80 ""))
(assert (= x_82 (str.++ x_81 literal_80)))
(assert (= literal_83 "\x3c\x62\x72\x20\x2f\x3e\x5c\x6e"))
(assert (= x_84 (str.++ x_82 literal_83)))
(assert (str.in_re x_84 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
