(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_46 () String)
(declare-fun x_45 () String)
(declare-fun literal_3 () String)
(declare-fun literal_4 () String)
(declare-fun literal_5 () String)
(declare-fun literal_14 () String)
(declare-fun literal_47 () String)
(declare-fun x_49 () String)
(declare-fun literal_52 () String)
(declare-fun x_54 () String)
(declare-fun literal_53 () String)
(declare-fun x_55 () String)
(declare-fun literal_56 () String)
(declare-fun x_57 () String)
(declare-fun x_58 () String)
(declare-fun literal_59 () String)
(declare-fun x_60 () String)
(assert (= literal_3 "\x77\x64\x69\x72"))
(assert (= literal_4 "\x2f"))
(assert (= literal_5 "\x2f"))
(assert (= literal_14 ""))
(assert (or (= x_45 literal_3) (= x_45 literal_4) (= x_45 literal_5) (= x_45 literal_14)))
(assert (= literal_47 "\x2f"))
(assert (= x_49 (str.++ x_45 literal_47)))
(assert (= literal_52 "\x2f\x66\x69\x6c\x65\x2e\x70\x68\x70\x2f\x69\x64"))
(assert (= x_54 (str.++ literal_52 x_49)))
(assert (= literal_53 "\x2f\x66\x69\x6c\x65\x2e\x70\x68\x70\x3f\x66\x69\x6c\x65\x3d\x2f\x69\x64"))
(assert (= x_55 (str.++ literal_53 x_49)))
(assert (= literal_56 "\x3c\x61\x20\x6f\x6e\x63\x6c\x69\x63\x6b\x3d\x22\x72\x65\x74\x75\x72\x6e\x20\x73\x65\x74\x5f\x76\x61\x6c\x75\x65\x28\x69\x6e\x66\x6f\x20\x3d\x20\x7b\x75\x72\x6c\x3a\x20\x27"))
(assert (or (= x_57 x_55) (= x_57 x_54)))
(assert (= x_58 (str.++ literal_56 x_57)))
(assert (= literal_59 "\x27\x2c"))
(assert (= x_60 (str.++ x_58 literal_59)))
(assert (str.in_re x_60 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
