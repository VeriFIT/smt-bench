(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun literal_20 () String)
(declare-fun x_21 () String)
(declare-fun literal_19 () String)
(declare-fun literal_17 () String)
(declare-fun x_22 () String)
(declare-fun literal_25 () String)
(declare-fun x_26 () String)
(declare-fun literal_24 () String)
(declare-fun x_23 () String)
(declare-fun epsilon () String)
(declare-fun literal_13 () String)
(declare-fun x_27 () String)
(declare-fun literal_28 () String)
(declare-fun x_29 () String)
(declare-fun literal_30 () String)
(declare-fun x_32 () String)
(declare-fun x_33 () String)
(declare-fun literal_31 () String)
(declare-fun x_34 () String)
(declare-fun literal_35 () String)
(declare-fun x_36 () String)
(declare-fun sigmaStar_39 () String)
(declare-fun x_38 () String)
(assert (= literal_20 "\x53\x45\x4c\x45\x43\x54\x20\x75\x2e\x69\x64\x2c\x20\x75\x2e\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x20\x75\x2e\x66\x69\x72\x73\x74\x6e\x61\x6d\x65\x2c\x20\x75\x2e\x6c\x61\x73\x74\x6e\x61\x6d\x65\x2c\x20\x75\x2e\x6d\x61\x69\x6c\x64\x69\x73\x70\x6c\x61\x79\x2c\x20\x75\x2e\x6d\x61\x69\x6c\x66\x6f\x72\x6d\x61\x74\x2c\x20\x75\x2e\x6d\x61\x69\x6c\x64\x69\x67\x65\x73\x74\x2c\x20\x75\x2e\x65\x6d\x61\x69\x6c\x73\x74\x6f\x70\x2c\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x75\x2e\x65\x6d\x61\x69\x6c\x2c\x20\x75\x2e\x63\x69\x74\x79\x2c\x20\x75\x2e\x63\x6f\x75\x6e\x74\x72\x79\x2c\x20\x75\x2e\x6c\x61\x73\x74\x61\x63\x63\x65\x73\x73\x2c\x20\x75\x2e\x6c\x61\x73\x74\x6c\x6f\x67\x69\x6e\x2c\x20\x75\x2e\x70\x69\x63\x74\x75\x72\x65\x2c\x20\x75\x2e\x74\x69\x6d\x65\x7a\x6f\x6e\x65\x2c\x20\x75\x2e\x6c\x61\x6e\x67\x2c\x20\x75\x2e\x74\x72\x61\x63\x6b\x66\x6f\x72\x75\x6d\x73\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x20\x75\x2c\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x66\x6f\x72\x75\x6d\x5f\x73\x75\x62\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x73\x20\x73\x20"))
(assert (= literal_19 ""))
(assert (= literal_17 "\x2c\x20\x67\x72\x6f\x75\x70\x73\x5f\x6d\x65\x6d\x62\x65\x72\x73\x20\x67"))
(assert (or (= x_21 literal_19) (= x_21 literal_17)))
(assert (= x_22 (str.++ literal_20 x_21)))
(assert (= literal_25 "\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x57\x48\x45\x52\x45\x20\x73\x2e\x66\x6f\x72\x75\x6d\x20\x3d\x20\x27"))
(assert (= x_26 (str.++ x_22 literal_25)))
(assert (= literal_24 "\x20\x41\x4e\x44\x20\x67\x2e\x67\x72\x6f\x75\x70\x69\x64\x20\x3d\x20\x27"))
(assert (= epsilon ""))
(assert (= literal_13 "\x63\x6f\x75\x72\x73\x65"))
(assert (or (= x_23 epsilon) (= x_23 literal_13)))
(assert (= x_27 (str.++ literal_24 x_23)))
(assert (= literal_28 "\x27\x20\x41\x4e\x44\x20\x75\x2e\x69\x64\x20\x3d\x20\x67\x2e\x75\x73\x65\x72\x69\x64"))
(assert (= x_29 (str.++ x_27 literal_28)))
(assert (= literal_30 "\x27\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x41\x4e\x44\x20\x73\x2e\x75\x73\x65\x72\x69\x64\x20\x3d\x20\x75\x2e\x69\x64\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x41\x4e\x44\x20\x75\x2e\x64\x65\x6c\x65\x74\x65\x64\x20\x3c\x3e\x20\x31\x20\x20"))
(assert (= x_32 (str.++ x_26 literal_30)))
(assert (= literal_31 ""))
(assert (or (= x_33 literal_31) (= x_33 x_29)))
(assert (= x_34 (str.++ x_32 x_33)))
(assert (= literal_35 "\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x4f\x52\x44\x45\x52\x20\x42\x59\x20\x75\x2e\x65\x6d\x61\x69\x6c\x20\x41\x53\x43"))
(assert (= x_36 (str.++ x_34 literal_35)))
(assert (or (= x_38 epsilon) (= x_38 x_36)))
(assert (str.in_re x_38 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
