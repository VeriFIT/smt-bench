(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun literal_9 () String)
(declare-fun x_11 () String)
(declare-fun epsilon () String)
(declare-fun literal_6 () String)
(declare-fun x_13 () String)
(declare-fun literal_15 () String)
(declare-fun x_17 () String)
(declare-fun x_16 () String)
(declare-fun literal_12 () String)
(declare-fun literal_14 () String)
(declare-fun x_18 () String)
(declare-fun literal_30 () String)
(declare-fun x_31 () String)
(declare-fun literal_29 () String)
(declare-fun x_33 () String)
(declare-fun literal_34 () String)
(declare-fun x_35 () String)
(assert (= literal_9 "\x63\x68\x61\x74\x69\x64\x20\x3d\x20\x27\x20\x41\x4e\x44\x20\x74\x69\x6d\x65\x73\x74\x61\x6d\x70\x20\x3e\x20"))
(assert (= epsilon ""))
(assert (= literal_6 "\x63\x68\x61\x74\x5f\x6c\x61\x73\x74\x74\x69\x6d\x65"))
(assert (or (= x_11 epsilon) (= x_11 literal_6)))
(assert (= x_13 (str.++ literal_9 x_11)))
(assert (= literal_15 "\x27\x20"))
(assert (= x_17 (str.++ x_13 literal_15)))
(assert (= literal_12 "\x20\x41\x4e\x44\x20\x28\x67\x72\x6f\x75\x70\x69\x64\x3d\x27\x27\x20\x4f\x52\x20\x67\x72\x6f\x75\x70\x69\x64\x3d\x27\x30\x27\x29\x20"))
(assert (= literal_14 ""))
(assert (or (= x_16 literal_12) (= x_16 literal_14)))
(assert (= x_18 (str.++ x_17 x_16)))
(assert (= literal_30 "\x2f\x6d\x6f\x64\x2f\x63\x68\x61\x74\x2f\x67\x75\x69\x5f\x68\x65\x61\x64\x65\x72\x5f\x6a\x73\x2f\x6a\x73\x75\x70\x64\x61\x74\x65\x2e\x70\x68\x70\x3f\x63\x68\x61\x74\x5f\x73\x69\x64\x3d\x63\x68\x61\x74\x5f\x73\x69\x64\x26\x63\x68\x61\x74\x5f\x6c\x61\x73\x74\x74\x69\x6d\x65\x3d"))
(assert (= literal_29 "\x30"))
(assert (or (= x_31 epsilon) (= x_31 literal_29)))
(assert (= x_33 (str.++ literal_30 x_31)))
(assert (= literal_34 "\x26\x63\x68\x61\x74\x5f\x6c\x61\x73\x74\x72\x6f\x77\x3d"))
(assert (= x_35 (str.++ x_33 literal_34)))
(assert (str.in_re x_35 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
