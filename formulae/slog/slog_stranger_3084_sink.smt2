(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun sigmaStar_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_13 () String)
(declare-fun literal_12 () String)
(declare-fun x_14 () String)
(declare-fun x_15 () String)
(declare-fun literal_16 () String)
(declare-fun x_17 () String)
(declare-fun literal_18 () String)
(declare-fun x_19 () String)
(declare-fun x_20 () String)
(declare-fun literal_21 () String)
(declare-fun x_22 () String)
(declare-fun literal_23 () String)
(declare-fun x_24 () String)
(assert (= literal_11 "\x70\x6f\x73\x74\x73\x20\x57\x48\x45\x52\x45\x20\x70\x6f\x73\x74\x5f\x64\x61\x74\x65\x73\x74\x61\x6d\x70\x20\x3c\x20"))
(assert (= x_13 (str.++ literal_11 sigmaStar_10)))
(assert (= literal_12 "\x53\x45\x4c\x45\x43\x54\x20\x70\x6f\x73\x74\x5f\x69\x64\x2c\x70\x6f\x73\x74\x5f\x64\x61\x74\x65\x73\x74\x61\x6d\x70\x20\x46\x52\x4f\x4d\x20"))
(assert (= x_14 (str.++ literal_12 sigmaStar_2)))
(assert (= x_15 (str.++ x_14 x_13)))
(assert (= literal_16 "\x53\x45\x4c\x45\x43\x54\x20\x2a\x20\x46\x52\x4f\x4d\x20"))
(assert (= x_17 (str.++ literal_16 sigmaStar_3)))
(assert (= literal_18 "\x66\x6f\x72\x75\x6d\x5f\x61\x74\x74\x61\x63\x68\x6d\x65\x6e\x74\x73\x20\x57\x48\x45\x52\x45\x20\x70\x6f\x73\x74\x5f\x69\x64\x3d\x27"))
(assert (= x_19 (str.++ x_17 literal_18)))
(assert (= x_20 (str.++ x_19 x_15)))
(assert (= literal_21 "\x27"))
(assert (= x_22 (str.++ x_20 literal_21)))
(assert (= literal_23 "\x61\x74\x74\x61\x63\x68\x6d\x65\x6e\x74\x73\x2f"))
(assert (= x_24 (str.++ literal_23 x_22)))
(assert (str.in_re x_24 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x2f\x65\x76\x69\x6c") (re.* re.allchar)))))
(check-sat)
(exit)
