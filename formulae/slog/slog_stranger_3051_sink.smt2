(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun literal_4 () String)
(declare-fun x_5 () String)
(declare-fun literal_6 () String)
(declare-fun x_7 () String)
(declare-fun x_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_10 () String)
(declare-fun x_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_13 () String)
(declare-fun x_14 () String)
(declare-fun literal_15 () String)
(declare-fun x_16 () String)
(declare-fun literal_17 () String)
(declare-fun x_18 () String)
(declare-fun literal_19 () String)
(declare-fun x_20 () String)
(assert (= literal_4 "\x3c\x21\x44\x4f\x43\x54\x59\x50\x45\x20\x48\x54\x4d\x4c\x20\x50\x55\x42\x4c\x49\x43\x20\x22\x2d\x2f\x2f\x57\x33\x43\x2f\x2f\x44\x54\x44\x20\x48\x54\x4d\x4c\x20\x34\x2e\x30\x31\x20\x54\x72\x61\x6e\x73\x69\x74\x69\x6f\x6e\x61\x6c\x2f\x2f\x45\x4e\x22\x3e\x0d\x0a\x3c\x68\x74\x6d\x6c\x3e\x0d\x0a\x3c\x68\x65\x61\x64\x3e\x0d\x0a\x3c\x74\x69\x74\x6c\x65\x3e"))
(assert (= x_5 (str.++ literal_4 sigmaStar_0)))
(assert (= literal_6 "\x3c\x2f\x74\x69\x74\x6c\x65\x3e\x0d\x0a\x3c\x6d\x65\x74\x61\x20\x68\x74\x74\x70\x2d\x65\x71\x75\x69\x76\x3d\x27\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65\x27\x20\x63\x6f\x6e\x74\x65\x6e\x74\x3d\x27\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x3b\x20\x63\x68\x61\x72\x73\x65\x74\x3d"))
(assert (= x_7 (str.++ x_5 literal_6)))
(assert (= x_8 (str.++ x_7 sigmaStar_1)))
(assert (= literal_9 "\x27\x3e\x0d\x0a\x3c\x6d\x65\x74\x61\x20\x6e\x61\x6d\x65\x3d\x27\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e\x27\x20\x63\x6f\x6e\x74\x65\x6e\x74\x3d\x27"))
(assert (= x_10 (str.++ x_8 literal_9)))
(assert (= x_11 (str.++ x_10 sigmaStar_3)))
(assert (= literal_12 "\x27\x3e\x0d\x0a\x3c\x6d\x65\x74\x61\x20\x6e\x61\x6d\x65\x3d\x27\x6b\x65\x79\x77\x6f\x72\x64\x73\x27\x20\x63\x6f\x6e\x74\x65\x6e\x74\x3d\x27"))
(assert (= x_13 (str.++ x_11 literal_12)))
(assert (= x_14 (str.++ x_13 sigmaStar_2)))
(assert (= literal_15 "\x27\x3e\x0d\x0a\x3c\x6c\x69\x6e\x6b\x20\x72\x65\x6c\x3d\x27\x73\x74\x79\x6c\x65\x73\x68\x65\x65\x74\x27\x20\x68\x72\x65\x66\x3d\x27"))
(assert (= x_16 (str.++ x_14 literal_15)))
(assert (= literal_17 "\x73\x74\x79\x6c\x65\x73\x2e\x63\x73\x73\x27\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x2f\x63\x73\x73\x27\x3e\x0d\x0a\x3c\x73\x63\x72\x69\x70\x74\x20\x6c\x61\x6e\x67\x75\x61\x67\x65\x3d\x27\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x27\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x2f\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x27\x20\x73\x72\x63\x3d\x27"))
(assert (= x_18 (str.++ x_16 literal_17)))
(assert (= literal_19 "\x6a\x73\x63\x72\x69\x70\x74\x2e\x6a\x73\x27\x3e\x3c\x2f\x73\x63\x72\x69\x70\x74\x3e\x5c\x6e"))
(assert (= x_20 (str.++ x_18 literal_19)))
(assert (str.in_re x_20 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
