(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_15 () String)
(declare-fun literal_19 () String)
(declare-fun x_21 () String)
(declare-fun literal_16 () String)
(declare-fun literal_17 () String)
(declare-fun x_22 () String)
(declare-fun literal_24 () String)
(declare-fun x_26 () String)
(declare-fun literal_5 () String)
(declare-fun x_28 () String)
(declare-fun literal_30 () String)
(declare-fun x_32 () String)
(declare-fun literal_33 () String)
(declare-fun x_34 () String)
(assert (= literal_19 "\x26\x6e\x62\x73\x70\x3b\x3c\x61\x20\x74\x61\x72\x67\x65\x74\x3d\x5c\x22\x75\x70\x6c\x6f\x61\x64\x65\x64\x66\x69\x6c\x65\x5c\x22\x20\x68\x72\x65\x66\x3d\x5c\x22\x2f"))
(assert (= literal_16 "\x66\x69\x6c\x65\x2e\x70\x68\x70\x2f\x2f\x2f\x77\x6f\x72\x6b\x73\x68\x6f\x70\x2f\x2f\x2f\x2f\x77\x6f\x72\x6b\x73\x68\x6f\x70\x2f"))
(assert (= literal_17 "\x66\x69\x6c\x65\x2e\x70\x68\x70\x3f\x66\x69\x6c\x65\x3d\x2f\x2f\x2f\x77\x6f\x72\x6b\x73\x68\x6f\x70\x2f\x2f\x2f\x2f\x77\x6f\x72\x6b\x73\x68\x6f\x70\x2f"))
(assert (or (= x_21 literal_16) (= x_21 literal_17)))
(assert (= x_22 (str.++ literal_19 x_21)))
(assert (= literal_24 "\x5c\x22\x3e"))
(assert (= x_26 (str.++ x_22 literal_24)))
(assert (= literal_5 "\x2f\x2f\x77\x6f\x72\x6b\x73\x68\x6f\x70\x2f"))
(assert (= x_28 (str.++ x_26 literal_5)))
(assert (= literal_30 "\x3c\x2f\x61\x3e\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x72\x3e"))
(assert (= x_32 (str.++ x_28 literal_30)))
(assert (= literal_33 "\x3c\x69\x6d\x67\x20\x73\x72\x63\x3d\x5c\x22\x2f\x66\x2f\x69\x63\x6f\x6e\x5c\x22\x20\x68\x65\x69\x67\x68\x74\x3d\x5c\x22\x31\x36\x5c\x22\x20\x77\x69\x64\x74\x68\x3d\x5c\x22\x31\x36\x5c\x22\x20\x0d\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x62\x6f\x72\x64\x65\x72\x3d\x5c\x22\x30\x5c\x22\x20\x61\x6c\x74\x3d\x5c\x22\x46\x69\x6c\x65\x5c\x22\x20\x2f\x3e"))
(assert (= x_34 (str.++ literal_33 x_32)))
(assert (str.in_re x_34 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
