(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, and Jie-Hong R. Jiang
Generated on: 2019-02-28
Generator: Stranger
Application: Security analysis of string manipulating web applications
Target solver: CVC4, Norn, Z3-str2
Publication:
Hung-En Wang, Tzung-Lin Tsai, Chun-Han Lin, Fang Yu, Jie-Hong R. Jiang:
String Analysis via Automata Manipulation with Logic Circuit Representation. CAV (1) 2016: 241-260.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)

(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun sigmaStar_6 () String)
(declare-fun sigmaStar_7 () String)
(declare-fun sigmaStar_8 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun sigmaStar_10 () String)
(declare-fun sigmaStar_11 () String)
(declare-fun sigmaStar_12 () String)
(declare-fun sigmaStar_13 () String)
(declare-fun sigmaStar_14 () String)
(declare-fun sigmaStar_15 () String)
(declare-fun sigmaStar_16 () String)
(declare-fun sigmaStar_17 () String)
(declare-fun sigmaStar_18 () String)
(declare-fun sigmaStar_19 () String)
(declare-fun sigmaStar_20 () String)
(declare-fun sigmaStar_21 () String)
(declare-fun sigmaStar_22 () String)
(declare-fun sigmaStar_23 () String)
(declare-fun sigmaStar_24 () String)
(declare-fun sigmaStar_25 () String)
(declare-fun sigmaStar_26 () String)
(declare-fun literal_27 () String)
(declare-fun x_28 () String)
(declare-fun literal_29 () String)
(declare-fun x_30 () String)
(declare-fun x_32 () String)
(declare-fun literal_31 () String)
(declare-fun x_34 () String)
(declare-fun literal_33 () String)
(declare-fun x_35 () String)
(declare-fun literal_36 () String)
(declare-fun x_37 () String)
(declare-fun x_38 () String)
(declare-fun x_41 () String)
(declare-fun literal_39 () String)
(declare-fun x_42 () String)
(declare-fun literal_40 () String)
(declare-fun x_44 () String)
(declare-fun literal_43 () String)
(declare-fun x_45 () String)
(declare-fun x_46 () String)
(declare-fun literal_47 () String)
(declare-fun x_48 () String)
(declare-fun x_49 () String)
(declare-fun x_51 () String)
(declare-fun literal_50 () String)
(declare-fun x_52 () String)
(declare-fun sigmaStar_53 () String)
(declare-fun literal_54 () String)
(declare-fun x_58 () String)
(declare-fun x_59 () String)
(declare-fun literal_57 () String)
(declare-fun x_61 () String)
(declare-fun literal_56 () String)
(declare-fun x_63 () String)
(declare-fun literal_55 () String)
(declare-fun x_64 () String)
(declare-fun literal_62 () String)
(declare-fun x_65 () String)
(declare-fun literal_66 () String)
(declare-fun x_67 () String)
(declare-fun x_68 () String)
(declare-fun x_69 () String)
(declare-fun x_71 () String)
(declare-fun sigmaStar_72 () String)
(declare-fun literal_70 () String)
(declare-fun x_73 () String)
(declare-fun x_76 () String)
(declare-fun literal_75 () String)
(declare-fun x_79 () String)
(declare-fun literal_74 () String)
(declare-fun x_81 () String)
(declare-fun literal_80 () String)
(declare-fun x_82 () String)
(declare-fun literal_83 () String)
(declare-fun x_84 () String)
(declare-fun x_85 () String)
(declare-fun x_86 () String)
(declare-fun x_87 () String)
(declare-fun literal_89 () String)
(declare-fun x_90 () String)
(declare-fun literal_88 () String)
(declare-fun x_96 () String)
(declare-fun literal_95 () String)
(declare-fun x_98 () String)
(declare-fun literal_91 () String)
(declare-fun literal_92 () String)
(declare-fun literal_94 () String)
(declare-fun x_100 () String)
(declare-fun literal_99 () String)
(declare-fun x_101 () String)
(declare-fun literal_102 () String)
(declare-fun x_103 () String)
(declare-fun x_104 () String)
(declare-fun x_105 () String)
(declare-fun x_106 () String)
(assert (= literal_27 "\x53\x45\x4c\x45\x43\x54\x20\x2a\x20\x46\x52\x4f\x4d\x20"))
(assert (= x_28 (str.++ literal_27 sigmaStar_9)))
(assert (= literal_29 "\x70\x6f\x73\x74\x73\x20\x49\x4e\x4e\x45\x52\x20\x4a\x4f\x49\x4e\x20"))
(assert (= x_30 (str.++ x_28 literal_29)))
(assert (= x_32 (str.++ x_30 sigmaStar_6)))
(assert (= literal_31 "\x75\x73\x65\x72\x73\x2e\x75\x73\x65\x72\x5f\x69\x64\x20\x57\x48\x45\x52\x45\x20\x74\x68\x72\x65\x61\x64\x5f\x69\x64\x3d\x27"))
(assert (= x_34 (str.++ literal_31 sigmaStar_12)))
(assert (= literal_33 "\x75\x73\x65\x72\x73\x20\x4f\x4e\x20"))
(assert (= x_35 (str.++ x_32 literal_33)))
(assert (= literal_36 "\x20\x61\x6e\x64\x20\x70\x6f\x73\x74\x5f\x69\x64\x3d"))
(assert (= x_37 (str.++ x_34 literal_36)))
(assert (= x_38 (str.++ x_35 sigmaStar_3)))
(assert (= x_41 (str.++ x_37 sigmaStar_22)))
(assert (= literal_39 "\x70\x6f\x73\x74\x73\x2e\x70\x6f\x73\x74\x5f\x61\x75\x74\x68\x6f\x72\x3d"))
(assert (= x_42 (str.++ x_38 literal_39)))
(assert (= literal_40 "\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x72\x65\x70\x6c\x79\x26\x61\x6d\x70\x3b\x66\x6f\x72\x75\x6d\x5f\x69\x64\x3d"))
(assert (= x_44 (str.++ literal_40 sigmaStar_11)))
(assert (= literal_43 "\x27"))
(assert (= x_45 (str.++ x_41 literal_43)))
(assert (= x_46 (str.++ x_42 sigmaStar_5)))
(assert (= literal_47 "\x26\x61\x6d\x70\x3b\x74\x68\x72\x65\x61\x64\x5f\x69\x64\x3d"))
(assert (= x_48 (str.++ x_44 literal_47)))
(assert (= x_49 (str.++ x_46 x_45)))
(assert (= x_51 (str.++ x_48 sigmaStar_26)))
(assert (= literal_50 "\x5b\x71\x75\x6f\x74\x65\x5d\x5b\x62\x5d"))
(assert (= x_52 (str.++ literal_50 x_49)))
(assert (= literal_54 "\x20\x65\x6e\x63\x74\x79\x70\x65\x3d\x6d\x75\x6c\x74\x69\x70\x61\x72\x74\x2f\x66\x6f\x72\x6d\x2d\x64\x61\x74\x61\x27\x3e\x0d\x0a\x3c\x74\x61\x62\x6c\x65\x20\x63\x65\x6c\x6c\x70\x61\x64\x64\x69\x6e\x67\x3d\x27\x30\x27\x20\x63\x65\x6c\x6c\x73\x70\x61\x63\x69\x6e\x67\x3d\x27\x30\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x30\x30\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x2d\x62\x6f\x72\x64\x65\x72\x27\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x3e\x0d\x0a\x3c\x74\x61\x62\x6c\x65\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x30\x30\x25\x27\x20\x62\x6f\x72\x64\x65\x72\x3d\x27\x30\x27\x20\x63\x65\x6c\x6c\x73\x70\x61\x63\x69\x6e\x67\x3d\x27\x31\x27\x20\x63\x65\x6c\x6c\x70\x61\x64\x64\x69\x6e\x67\x3d\x27\x30\x27\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x34\x35\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e"))
(assert (= x_58 (str.++ x_51 literal_54)))
(assert (= x_59 (str.++ x_52 sigmaStar_24)))
(assert (= literal_57 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x74\x65\x78\x74\x27\x20\x6e\x61\x6d\x65\x3d\x27\x73\x75\x62\x6a\x65\x63\x74\x27\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= literal_56 ""))
(assert (or (= x_61 sigmaStar_16) (= x_61 sigmaStar_1) (= x_61 literal_56)))
(assert (= x_63 (str.++ literal_57 x_61)))
(assert (= literal_55 "\x3c\x66\x6f\x72\x6d\x20\x6e\x61\x6d\x65\x3d\x27\x69\x6e\x70\x75\x74\x66\x6f\x72\x6d\x27\x20\x6d\x65\x74\x68\x6f\x64\x3d\x27\x70\x6f\x73\x74\x27\x20\x61\x63\x74\x69\x6f\x6e\x3d\x27"))
(assert (= x_64 (str.++ literal_55 x_58)))
(assert (= literal_62 "\x5b\x2f\x62\x5d\x5c\x6e"))
(assert (= x_65 (str.++ x_59 literal_62)))
(assert (= literal_66 "\x20\x63\x6c\x61\x73\x73\x3d\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x6d\x61\x78\x6c\x65\x6e\x67\x74\x68\x3d\x27\x32\x35\x35\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x32\x35\x30\x70\x78\x27\x3e"))
(assert (= x_67 (str.++ x_63 literal_66)))
(assert (= x_68 (str.++ x_64 sigmaStar_17)))
(assert (= x_69 (str.++ x_65 x_49)))
(assert (= x_71 (str.++ x_68 x_67)))
(assert (= literal_70 "\x5b\x2f\x71\x75\x6f\x74\x65\x5d"))
(assert (= x_73 (str.++ x_69 literal_70)))
(assert (= x_76 (str.++ x_71 sigmaStar_14)))
(assert (= literal_75 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x74\x65\x78\x74\x61\x72\x65\x61\x20\x6e\x61\x6d\x65\x3d\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x20\x63\x6f\x6c\x73\x3d\x27\x38\x30\x27\x20\x72\x6f\x77\x73\x3d\x27\x31\x35\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x3e"))
(assert (= literal_74 ""))
(assert (or (= x_79 literal_74) (= x_79 sigmaStar_15) (= x_79 x_73) (= x_79 sigmaStar_25)))
(assert (= x_81 (str.++ literal_75 x_79)))
(assert (= literal_80 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x76\x61\x6c\x69\x67\x6e\x3d\x27\x74\x6f\x70\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x34\x35\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e"))
(assert (= x_82 (str.++ x_76 literal_80)))
(assert (= literal_83 "\x3c\x2f\x74\x65\x78\x74\x61\x72\x65\x61\x3e\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x34\x35\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x62\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x66\x6f\x6e\x74\x2d\x77\x65\x69\x67\x68\x74\x3a\x62\x6f\x6c\x64\x3b\x77\x69\x64\x74\x68\x3a\x32\x35\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x62\x5d\x27\x2c\x20\x27\x5b\x2f\x62\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x69\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x66\x6f\x6e\x74\x2d\x73\x74\x79\x6c\x65\x3a\x69\x74\x61\x6c\x69\x63\x3b\x77\x69\x64\x74\x68\x3a\x32\x35\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x69\x5d\x27\x2c\x20\x27\x5b\x2f\x69\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x75\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x74\x65\x78\x74\x2d\x64\x65\x63\x6f\x72\x61\x74\x69\x6f\x6e\x3a\x75\x6e\x64\x65\x72\x6c\x69\x6e\x65\x3b\x77\x69\x64\x74\x68\x3a\x32\x35\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x75\x5d\x27\x2c\x20\x27\x5b\x2f\x75\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x75\x72\x6c\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x33\x30\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x75\x72\x6c\x5d\x27\x2c\x20\x27\x5b\x2f\x75\x72\x6c\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x6d\x61\x69\x6c\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x33\x35\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x6d\x61\x69\x6c\x5d\x27\x2c\x20\x27\x5b\x2f\x6d\x61\x69\x6c\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x69\x6d\x67\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x33\x30\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x69\x6d\x67\x5d\x27\x2c\x20\x27\x5b\x2f\x69\x6d\x67\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x34\x35\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x63\x65\x6e\x74\x65\x72\x5d\x27\x2c\x20\x27\x5b\x2f\x63\x65\x6e\x74\x65\x72\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x73\x6d\x61\x6c\x6c\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x34\x30\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x73\x6d\x61\x6c\x6c\x5d\x27\x2c\x20\x27\x5b\x2f\x73\x6d\x61\x6c\x6c\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x63\x6f\x64\x65\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x34\x30\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x63\x6f\x64\x65\x5d\x27\x2c\x20\x27\x5b\x2f\x63\x6f\x64\x65\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x71\x75\x6f\x74\x65\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x62\x75\x74\x74\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x34\x35\x70\x78\x3b\x27\x20\x6f\x6e\x43\x6c\x69\x63\x6b\x3d\x5c\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x71\x75\x6f\x74\x65\x5d\x27\x2c\x20\x27\x5b\x2f\x71\x75\x6f\x74\x65\x5d\x27\x29\x3b\x5c\x22\x3e\x0d\x0a\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x34\x35\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x0d\x0a"))
(assert (= x_84 (str.++ x_81 literal_83)))
(assert (= x_85 (str.++ x_82 sigmaStar_2)))
(assert (= x_86 (str.++ x_85 x_84)))
(assert (= x_87 (str.++ x_86 sigmaStar_10)))
(assert (= literal_89 "\x3c\x73\x65\x6c\x65\x63\x74\x20\x6e\x61\x6d\x65\x3d\x27\x62\x62\x63\x6f\x6c\x6f\x72\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x65\x78\x74\x62\x6f\x78\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x77\x69\x64\x74\x68\x3a\x39\x30\x70\x78\x3b\x27\x20\x6f\x6e\x43\x68\x61\x6e\x67\x65\x3d\x22\x61\x64\x64\x54\x65\x78\x74\x28\x27\x6d\x65\x73\x73\x61\x67\x65\x27\x2c\x20\x27\x5b\x63\x6f\x6c\x6f\x72\x3d\x27\x20\x2b\x20\x74\x68\x69\x73\x2e\x6f\x70\x74\x69\x6f\x6e\x73\x5b\x74\x68\x69\x73\x2e\x73\x65\x6c\x65\x63\x74\x65\x64\x49\x6e\x64\x65\x78\x5d\x2e\x76\x61\x6c\x75\x65\x20\x2b\x20\x27\x5d\x27\x2c\x20\x27\x5b\x2f\x63\x6f\x6c\x6f\x72\x5d\x27\x29\x3b\x74\x68\x69\x73\x2e\x73\x65\x6c\x65\x63\x74\x65\x64\x49\x6e\x64\x65\x78\x3d\x30\x3b\x22\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x27\x3e\x44\x65\x66\x61\x75\x6c\x74\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x6d\x61\x72\x6f\x6f\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x6d\x61\x72\x6f\x6f\x6e\x3b\x27\x3e\x4d\x61\x72\x6f\x6f\x6e\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x72\x65\x64\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x72\x65\x64\x3b\x27\x3e\x52\x65\x64\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x6f\x72\x61\x6e\x67\x65\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x6f\x72\x61\x6e\x67\x65\x3b\x27\x3e\x4f\x72\x61\x6e\x67\x65\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x62\x72\x6f\x77\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x62\x72\x6f\x77\x6e\x3b\x27\x3e\x42\x72\x6f\x77\x6e\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x79\x65\x6c\x6c\x6f\x77\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x79\x65\x6c\x6c\x6f\x77\x3b\x27\x3e\x59\x65\x6c\x6c\x6f\x77\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x67\x72\x65\x65\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x67\x72\x65\x65\x6e\x3b\x27\x3e\x47\x72\x65\x65\x6e\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x6c\x69\x6d\x65\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x6c\x69\x6d\x65\x3b\x27\x3e\x4c\x69\x6d\x65\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x6f\x6c\x69\x76\x65\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x6f\x6c\x69\x76\x65\x3b\x27\x3e\x4f\x6c\x69\x76\x65\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x63\x79\x61\x6e\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x63\x79\x61\x6e\x3b\x27\x3e\x43\x79\x61\x6e\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x62\x6c\x75\x65\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x62\x6c\x75\x65\x3b\x27\x3e\x42\x6c\x75\x65\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x6e\x61\x76\x79\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x6e\x61\x76\x79\x3b\x27\x3e\x4e\x61\x76\x79\x20\x42\x6c\x75\x65\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x70\x75\x72\x70\x6c\x65\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x70\x75\x72\x70\x6c\x65\x3b\x27\x3e\x50\x75\x72\x70\x6c\x65\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x76\x69\x6f\x6c\x65\x74\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x76\x69\x6f\x6c\x65\x74\x3b\x27\x3e\x56\x69\x6f\x6c\x65\x74\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x62\x6c\x61\x63\x6b\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x62\x6c\x61\x63\x6b\x3b\x27\x3e\x42\x6c\x61\x63\x6b\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x67\x72\x61\x79\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x67\x72\x61\x79\x3b\x27\x3e\x47\x72\x61\x79\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x73\x69\x6c\x76\x65\x72\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x73\x69\x6c\x76\x65\x72\x3b\x27\x3e\x53\x69\x6c\x76\x65\x72\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27\x77\x68\x69\x74\x65\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x6f\x6c\x6f\x72\x3a\x77\x68\x69\x74\x65\x3b\x27\x3e\x57\x68\x69\x74\x65\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x0d\x0a\x3c\x2f\x73\x65\x6c\x65\x63\x74\x3e\x0d\x0a\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x34\x35\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x0d\x0a"))
(assert (= x_90 (str.++ x_87 literal_89)))
(assert (= literal_88 "\x6d\x65\x73\x73\x61\x67\x65"))
(assert (= x_96 (str.++ x_90 literal_88)))
(assert (= literal_95 "\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x0d\x0a\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x27\x63\x68\x65\x63\x6b\x62\x6f\x78\x27\x20\x6e\x61\x6d\x65\x3d\x27\x64\x69\x73\x61\x62\x6c\x65\x5f\x73\x6d\x69\x6c\x65\x79\x73\x27\x20\x76\x61\x6c\x75\x65\x3d\x27\x31\x27"))
(assert (= literal_91 "\x20\x63\x68\x65\x63\x6b\x65\x64"))
(assert (= literal_92 ""))
(assert (= literal_94 ""))
(assert (or (= x_98 literal_91) (= x_98 literal_92) (= x_98 literal_94) (= x_98 sigmaStar_20)))
(assert (= x_100 (str.++ literal_95 x_98)))
(assert (= literal_99 "\x0d\x0a\x3c\x2f\x74\x64\x3e\x0d\x0a\x3c\x2f\x74\x72\x3e\x0d\x0a\x3c\x74\x72\x3e\x0d\x0a\x3c\x74\x64\x20\x76\x61\x6c\x69\x67\x6e\x3d\x27\x74\x6f\x70\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x34\x35\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e"))
(assert (= x_101 (str.++ x_96 literal_99)))
(assert (= literal_102 "\x3e"))
(assert (= x_103 (str.++ x_100 literal_102)))
(assert (= x_104 (str.++ x_101 sigmaStar_7)))
(assert (= x_105 (str.++ x_104 x_103)))
(assert (= x_106 (str.++ x_105 sigmaStar_18)))
(assert (str.in_re x_106 (re.++ (re.* re.allchar) (re.++ (str.to_re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(exit)
